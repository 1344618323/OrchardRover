// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: obstacle_layer_setting.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "obstacle_layer_setting.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace or_costmap {
class ParaObstacleLayerDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ParaObstacleLayer>
     _instance;
} _ParaObstacleLayer_default_instance_;

namespace protobuf_obstacle_5flayer_5fsetting_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaObstacleLayer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaObstacleLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaObstacleLayer, observation_keep_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaObstacleLayer, expected_update_rate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaObstacleLayer, min_obstacle_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaObstacleLayer, max_obstacle_height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaObstacleLayer, obstacle_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaObstacleLayer, raytrace_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaObstacleLayer, transform_tolerance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaObstacleLayer, topic_string_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaObstacleLayer, sensor_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaObstacleLayer, inf_is_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaObstacleLayer, clearing_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaObstacleLayer, marking_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaObstacleLayer, footprint_clearing_enabled_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  9,
  10,
  11,
  12,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(ParaObstacleLayer)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ParaObstacleLayer_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "obstacle_layer_setting.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ParaObstacleLayer_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ParaObstacleLayer_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034obstacle_layer_setting.proto\022\nor_costm"
      "ap\"\340\002\n\021ParaObstacleLayer\022\035\n\025observation_"
      "keep_time\030\001 \002(\001\022\034\n\024expected_update_rate\030"
      "\002 \002(\001\022\033\n\023min_obstacle_height\030\003 \002(\001\022\033\n\023ma"
      "x_obstacle_height\030\004 \002(\001\022\026\n\016obstacle_rang"
      "e\030\005 \002(\001\022\026\n\016raytrace_range\030\006 \002(\001\022\033\n\023trans"
      "form_tolerance\030\007 \002(\001\022\024\n\014topic_string\030\010 \002"
      "(\t\022\024\n\014sensor_frame\030\t \002(\t\022\024\n\014inf_is_valid"
      "\030\n \002(\010\022\020\n\010clearing\030\013 \002(\010\022\017\n\007marking\030\014 \002("
      "\010\022\"\n\032footprint_clearing_enabled\030\r \002(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 397);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "obstacle_layer_setting.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_obstacle_5flayer_5fsetting_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParaObstacleLayer::kObservationKeepTimeFieldNumber;
const int ParaObstacleLayer::kExpectedUpdateRateFieldNumber;
const int ParaObstacleLayer::kMinObstacleHeightFieldNumber;
const int ParaObstacleLayer::kMaxObstacleHeightFieldNumber;
const int ParaObstacleLayer::kObstacleRangeFieldNumber;
const int ParaObstacleLayer::kRaytraceRangeFieldNumber;
const int ParaObstacleLayer::kTransformToleranceFieldNumber;
const int ParaObstacleLayer::kTopicStringFieldNumber;
const int ParaObstacleLayer::kSensorFrameFieldNumber;
const int ParaObstacleLayer::kInfIsValidFieldNumber;
const int ParaObstacleLayer::kClearingFieldNumber;
const int ParaObstacleLayer::kMarkingFieldNumber;
const int ParaObstacleLayer::kFootprintClearingEnabledFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParaObstacleLayer::ParaObstacleLayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_obstacle_5flayer_5fsetting_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:or_costmap.ParaObstacleLayer)
}
ParaObstacleLayer::ParaObstacleLayer(const ParaObstacleLayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_topic_string()) {
    topic_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_string_);
  }
  sensor_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sensor_frame()) {
    sensor_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_frame_);
  }
  ::memcpy(&observation_keep_time_, &from.observation_keep_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&footprint_clearing_enabled_) -
    reinterpret_cast<char*>(&observation_keep_time_)) + sizeof(footprint_clearing_enabled_));
  // @@protoc_insertion_point(copy_constructor:or_costmap.ParaObstacleLayer)
}

void ParaObstacleLayer::SharedCtor() {
  _cached_size_ = 0;
  topic_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&observation_keep_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&footprint_clearing_enabled_) -
      reinterpret_cast<char*>(&observation_keep_time_)) + sizeof(footprint_clearing_enabled_));
}

ParaObstacleLayer::~ParaObstacleLayer() {
  // @@protoc_insertion_point(destructor:or_costmap.ParaObstacleLayer)
  SharedDtor();
}

void ParaObstacleLayer::SharedDtor() {
  topic_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ParaObstacleLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParaObstacleLayer::descriptor() {
  protobuf_obstacle_5flayer_5fsetting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_5flayer_5fsetting_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ParaObstacleLayer& ParaObstacleLayer::default_instance() {
  protobuf_obstacle_5flayer_5fsetting_2eproto::InitDefaults();
  return *internal_default_instance();
}

ParaObstacleLayer* ParaObstacleLayer::New(::google::protobuf::Arena* arena) const {
  ParaObstacleLayer* n = new ParaObstacleLayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParaObstacleLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:or_costmap.ParaObstacleLayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!topic_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*topic_string_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!sensor_frame_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*sensor_frame_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&observation_keep_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&raytrace_range_) -
        reinterpret_cast<char*>(&observation_keep_time_)) + sizeof(raytrace_range_));
  }
  if (cached_has_bits & 7936u) {
    ::memset(&transform_tolerance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&footprint_clearing_enabled_) -
        reinterpret_cast<char*>(&transform_tolerance_)) + sizeof(footprint_clearing_enabled_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ParaObstacleLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:or_costmap.ParaObstacleLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double observation_keep_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_observation_keep_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &observation_keep_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double expected_update_rate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_expected_update_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &expected_update_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double min_obstacle_height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_min_obstacle_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_obstacle_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double max_obstacle_height = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_max_obstacle_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_obstacle_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double obstacle_range = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_obstacle_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double raytrace_range = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_raytrace_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &raytrace_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double transform_tolerance = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_transform_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string topic_string = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_string().data(), static_cast<int>(this->topic_string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "or_costmap.ParaObstacleLayer.topic_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string sensor_frame = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_frame()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sensor_frame().data(), static_cast<int>(this->sensor_frame().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "or_costmap.ParaObstacleLayer.sensor_frame");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool inf_is_valid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_inf_is_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inf_is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool clearing = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_clearing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clearing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool marking = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_marking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &marking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool footprint_clearing_enabled = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_footprint_clearing_enabled();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &footprint_clearing_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:or_costmap.ParaObstacleLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:or_costmap.ParaObstacleLayer)
  return false;
#undef DO_
}

void ParaObstacleLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:or_costmap.ParaObstacleLayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double observation_keep_time = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->observation_keep_time(), output);
  }

  // required double expected_update_rate = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->expected_update_rate(), output);
  }

  // required double min_obstacle_height = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_obstacle_height(), output);
  }

  // required double max_obstacle_height = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_obstacle_height(), output);
  }

  // required double obstacle_range = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->obstacle_range(), output);
  }

  // required double raytrace_range = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->raytrace_range(), output);
  }

  // required double transform_tolerance = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->transform_tolerance(), output);
  }

  // required string topic_string = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_string().data(), static_cast<int>(this->topic_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "or_costmap.ParaObstacleLayer.topic_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->topic_string(), output);
  }

  // required string sensor_frame = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_frame().data(), static_cast<int>(this->sensor_frame().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "or_costmap.ParaObstacleLayer.sensor_frame");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sensor_frame(), output);
  }

  // required bool inf_is_valid = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->inf_is_valid(), output);
  }

  // required bool clearing = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->clearing(), output);
  }

  // required bool marking = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->marking(), output);
  }

  // required bool footprint_clearing_enabled = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->footprint_clearing_enabled(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:or_costmap.ParaObstacleLayer)
}

::google::protobuf::uint8* ParaObstacleLayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:or_costmap.ParaObstacleLayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double observation_keep_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->observation_keep_time(), target);
  }

  // required double expected_update_rate = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->expected_update_rate(), target);
  }

  // required double min_obstacle_height = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_obstacle_height(), target);
  }

  // required double max_obstacle_height = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_obstacle_height(), target);
  }

  // required double obstacle_range = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->obstacle_range(), target);
  }

  // required double raytrace_range = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->raytrace_range(), target);
  }

  // required double transform_tolerance = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->transform_tolerance(), target);
  }

  // required string topic_string = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_string().data(), static_cast<int>(this->topic_string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "or_costmap.ParaObstacleLayer.topic_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->topic_string(), target);
  }

  // required string sensor_frame = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_frame().data(), static_cast<int>(this->sensor_frame().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "or_costmap.ParaObstacleLayer.sensor_frame");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sensor_frame(), target);
  }

  // required bool inf_is_valid = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->inf_is_valid(), target);
  }

  // required bool clearing = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->clearing(), target);
  }

  // required bool marking = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->marking(), target);
  }

  // required bool footprint_clearing_enabled = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->footprint_clearing_enabled(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:or_costmap.ParaObstacleLayer)
  return target;
}

size_t ParaObstacleLayer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:or_costmap.ParaObstacleLayer)
  size_t total_size = 0;

  if (has_topic_string()) {
    // required string topic_string = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_string());
  }

  if (has_sensor_frame()) {
    // required string sensor_frame = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensor_frame());
  }

  if (has_observation_keep_time()) {
    // required double observation_keep_time = 1;
    total_size += 1 + 8;
  }

  if (has_expected_update_rate()) {
    // required double expected_update_rate = 2;
    total_size += 1 + 8;
  }

  if (has_min_obstacle_height()) {
    // required double min_obstacle_height = 3;
    total_size += 1 + 8;
  }

  if (has_max_obstacle_height()) {
    // required double max_obstacle_height = 4;
    total_size += 1 + 8;
  }

  if (has_obstacle_range()) {
    // required double obstacle_range = 5;
    total_size += 1 + 8;
  }

  if (has_raytrace_range()) {
    // required double raytrace_range = 6;
    total_size += 1 + 8;
  }

  if (has_transform_tolerance()) {
    // required double transform_tolerance = 7;
    total_size += 1 + 8;
  }

  if (has_inf_is_valid()) {
    // required bool inf_is_valid = 10;
    total_size += 1 + 1;
  }

  if (has_clearing()) {
    // required bool clearing = 11;
    total_size += 1 + 1;
  }

  if (has_marking()) {
    // required bool marking = 12;
    total_size += 1 + 1;
  }

  if (has_footprint_clearing_enabled()) {
    // required bool footprint_clearing_enabled = 13;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ParaObstacleLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:or_costmap.ParaObstacleLayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required string topic_string = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_string());

    // required string sensor_frame = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensor_frame());

    // required double observation_keep_time = 1;
    total_size += 1 + 8;

    // required double expected_update_rate = 2;
    total_size += 1 + 8;

    // required double min_obstacle_height = 3;
    total_size += 1 + 8;

    // required double max_obstacle_height = 4;
    total_size += 1 + 8;

    // required double obstacle_range = 5;
    total_size += 1 + 8;

    // required double raytrace_range = 6;
    total_size += 1 + 8;

    // required double transform_tolerance = 7;
    total_size += 1 + 8;

    // required bool inf_is_valid = 10;
    total_size += 1 + 1;

    // required bool clearing = 11;
    total_size += 1 + 1;

    // required bool marking = 12;
    total_size += 1 + 1;

    // required bool footprint_clearing_enabled = 13;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParaObstacleLayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:or_costmap.ParaObstacleLayer)
  GOOGLE_DCHECK_NE(&from, this);
  const ParaObstacleLayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ParaObstacleLayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:or_costmap.ParaObstacleLayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:or_costmap.ParaObstacleLayer)
    MergeFrom(*source);
  }
}

void ParaObstacleLayer::MergeFrom(const ParaObstacleLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:or_costmap.ParaObstacleLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_topic_string();
      topic_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_string_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sensor_frame();
      sensor_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_frame_);
    }
    if (cached_has_bits & 0x00000004u) {
      observation_keep_time_ = from.observation_keep_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      expected_update_rate_ = from.expected_update_rate_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_obstacle_height_ = from.min_obstacle_height_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_obstacle_height_ = from.max_obstacle_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      obstacle_range_ = from.obstacle_range_;
    }
    if (cached_has_bits & 0x00000080u) {
      raytrace_range_ = from.raytrace_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      transform_tolerance_ = from.transform_tolerance_;
    }
    if (cached_has_bits & 0x00000200u) {
      inf_is_valid_ = from.inf_is_valid_;
    }
    if (cached_has_bits & 0x00000400u) {
      clearing_ = from.clearing_;
    }
    if (cached_has_bits & 0x00000800u) {
      marking_ = from.marking_;
    }
    if (cached_has_bits & 0x00001000u) {
      footprint_clearing_enabled_ = from.footprint_clearing_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ParaObstacleLayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:or_costmap.ParaObstacleLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParaObstacleLayer::CopyFrom(const ParaObstacleLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:or_costmap.ParaObstacleLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaObstacleLayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;
  return true;
}

void ParaObstacleLayer::Swap(ParaObstacleLayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParaObstacleLayer::InternalSwap(ParaObstacleLayer* other) {
  using std::swap;
  topic_string_.Swap(&other->topic_string_);
  sensor_frame_.Swap(&other->sensor_frame_);
  swap(observation_keep_time_, other->observation_keep_time_);
  swap(expected_update_rate_, other->expected_update_rate_);
  swap(min_obstacle_height_, other->min_obstacle_height_);
  swap(max_obstacle_height_, other->max_obstacle_height_);
  swap(obstacle_range_, other->obstacle_range_);
  swap(raytrace_range_, other->raytrace_range_);
  swap(transform_tolerance_, other->transform_tolerance_);
  swap(inf_is_valid_, other->inf_is_valid_);
  swap(clearing_, other->clearing_);
  swap(marking_, other->marking_);
  swap(footprint_clearing_enabled_, other->footprint_clearing_enabled_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParaObstacleLayer::GetMetadata() const {
  protobuf_obstacle_5flayer_5fsetting_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_obstacle_5flayer_5fsetting_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParaObstacleLayer

// required double observation_keep_time = 1;
bool ParaObstacleLayer::has_observation_keep_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ParaObstacleLayer::set_has_observation_keep_time() {
  _has_bits_[0] |= 0x00000004u;
}
void ParaObstacleLayer::clear_has_observation_keep_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void ParaObstacleLayer::clear_observation_keep_time() {
  observation_keep_time_ = 0;
  clear_has_observation_keep_time();
}
double ParaObstacleLayer::observation_keep_time() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaObstacleLayer.observation_keep_time)
  return observation_keep_time_;
}
void ParaObstacleLayer::set_observation_keep_time(double value) {
  set_has_observation_keep_time();
  observation_keep_time_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaObstacleLayer.observation_keep_time)
}

// required double expected_update_rate = 2;
bool ParaObstacleLayer::has_expected_update_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ParaObstacleLayer::set_has_expected_update_rate() {
  _has_bits_[0] |= 0x00000008u;
}
void ParaObstacleLayer::clear_has_expected_update_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
void ParaObstacleLayer::clear_expected_update_rate() {
  expected_update_rate_ = 0;
  clear_has_expected_update_rate();
}
double ParaObstacleLayer::expected_update_rate() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaObstacleLayer.expected_update_rate)
  return expected_update_rate_;
}
void ParaObstacleLayer::set_expected_update_rate(double value) {
  set_has_expected_update_rate();
  expected_update_rate_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaObstacleLayer.expected_update_rate)
}

// required double min_obstacle_height = 3;
bool ParaObstacleLayer::has_min_obstacle_height() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ParaObstacleLayer::set_has_min_obstacle_height() {
  _has_bits_[0] |= 0x00000010u;
}
void ParaObstacleLayer::clear_has_min_obstacle_height() {
  _has_bits_[0] &= ~0x00000010u;
}
void ParaObstacleLayer::clear_min_obstacle_height() {
  min_obstacle_height_ = 0;
  clear_has_min_obstacle_height();
}
double ParaObstacleLayer::min_obstacle_height() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaObstacleLayer.min_obstacle_height)
  return min_obstacle_height_;
}
void ParaObstacleLayer::set_min_obstacle_height(double value) {
  set_has_min_obstacle_height();
  min_obstacle_height_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaObstacleLayer.min_obstacle_height)
}

// required double max_obstacle_height = 4;
bool ParaObstacleLayer::has_max_obstacle_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ParaObstacleLayer::set_has_max_obstacle_height() {
  _has_bits_[0] |= 0x00000020u;
}
void ParaObstacleLayer::clear_has_max_obstacle_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void ParaObstacleLayer::clear_max_obstacle_height() {
  max_obstacle_height_ = 0;
  clear_has_max_obstacle_height();
}
double ParaObstacleLayer::max_obstacle_height() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaObstacleLayer.max_obstacle_height)
  return max_obstacle_height_;
}
void ParaObstacleLayer::set_max_obstacle_height(double value) {
  set_has_max_obstacle_height();
  max_obstacle_height_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaObstacleLayer.max_obstacle_height)
}

// required double obstacle_range = 5;
bool ParaObstacleLayer::has_obstacle_range() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ParaObstacleLayer::set_has_obstacle_range() {
  _has_bits_[0] |= 0x00000040u;
}
void ParaObstacleLayer::clear_has_obstacle_range() {
  _has_bits_[0] &= ~0x00000040u;
}
void ParaObstacleLayer::clear_obstacle_range() {
  obstacle_range_ = 0;
  clear_has_obstacle_range();
}
double ParaObstacleLayer::obstacle_range() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaObstacleLayer.obstacle_range)
  return obstacle_range_;
}
void ParaObstacleLayer::set_obstacle_range(double value) {
  set_has_obstacle_range();
  obstacle_range_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaObstacleLayer.obstacle_range)
}

// required double raytrace_range = 6;
bool ParaObstacleLayer::has_raytrace_range() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ParaObstacleLayer::set_has_raytrace_range() {
  _has_bits_[0] |= 0x00000080u;
}
void ParaObstacleLayer::clear_has_raytrace_range() {
  _has_bits_[0] &= ~0x00000080u;
}
void ParaObstacleLayer::clear_raytrace_range() {
  raytrace_range_ = 0;
  clear_has_raytrace_range();
}
double ParaObstacleLayer::raytrace_range() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaObstacleLayer.raytrace_range)
  return raytrace_range_;
}
void ParaObstacleLayer::set_raytrace_range(double value) {
  set_has_raytrace_range();
  raytrace_range_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaObstacleLayer.raytrace_range)
}

// required double transform_tolerance = 7;
bool ParaObstacleLayer::has_transform_tolerance() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ParaObstacleLayer::set_has_transform_tolerance() {
  _has_bits_[0] |= 0x00000100u;
}
void ParaObstacleLayer::clear_has_transform_tolerance() {
  _has_bits_[0] &= ~0x00000100u;
}
void ParaObstacleLayer::clear_transform_tolerance() {
  transform_tolerance_ = 0;
  clear_has_transform_tolerance();
}
double ParaObstacleLayer::transform_tolerance() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaObstacleLayer.transform_tolerance)
  return transform_tolerance_;
}
void ParaObstacleLayer::set_transform_tolerance(double value) {
  set_has_transform_tolerance();
  transform_tolerance_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaObstacleLayer.transform_tolerance)
}

// required string topic_string = 8;
bool ParaObstacleLayer::has_topic_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParaObstacleLayer::set_has_topic_string() {
  _has_bits_[0] |= 0x00000001u;
}
void ParaObstacleLayer::clear_has_topic_string() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParaObstacleLayer::clear_topic_string() {
  topic_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic_string();
}
const ::std::string& ParaObstacleLayer::topic_string() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaObstacleLayer.topic_string)
  return topic_string_.GetNoArena();
}
void ParaObstacleLayer::set_topic_string(const ::std::string& value) {
  set_has_topic_string();
  topic_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:or_costmap.ParaObstacleLayer.topic_string)
}
#if LANG_CXX11
void ParaObstacleLayer::set_topic_string(::std::string&& value) {
  set_has_topic_string();
  topic_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:or_costmap.ParaObstacleLayer.topic_string)
}
#endif
void ParaObstacleLayer::set_topic_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_topic_string();
  topic_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:or_costmap.ParaObstacleLayer.topic_string)
}
void ParaObstacleLayer::set_topic_string(const char* value, size_t size) {
  set_has_topic_string();
  topic_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:or_costmap.ParaObstacleLayer.topic_string)
}
::std::string* ParaObstacleLayer::mutable_topic_string() {
  set_has_topic_string();
  // @@protoc_insertion_point(field_mutable:or_costmap.ParaObstacleLayer.topic_string)
  return topic_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParaObstacleLayer::release_topic_string() {
  // @@protoc_insertion_point(field_release:or_costmap.ParaObstacleLayer.topic_string)
  clear_has_topic_string();
  return topic_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParaObstacleLayer::set_allocated_topic_string(::std::string* topic_string) {
  if (topic_string != NULL) {
    set_has_topic_string();
  } else {
    clear_has_topic_string();
  }
  topic_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic_string);
  // @@protoc_insertion_point(field_set_allocated:or_costmap.ParaObstacleLayer.topic_string)
}

// required string sensor_frame = 9;
bool ParaObstacleLayer::has_sensor_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ParaObstacleLayer::set_has_sensor_frame() {
  _has_bits_[0] |= 0x00000002u;
}
void ParaObstacleLayer::clear_has_sensor_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
void ParaObstacleLayer::clear_sensor_frame() {
  sensor_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sensor_frame();
}
const ::std::string& ParaObstacleLayer::sensor_frame() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaObstacleLayer.sensor_frame)
  return sensor_frame_.GetNoArena();
}
void ParaObstacleLayer::set_sensor_frame(const ::std::string& value) {
  set_has_sensor_frame();
  sensor_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:or_costmap.ParaObstacleLayer.sensor_frame)
}
#if LANG_CXX11
void ParaObstacleLayer::set_sensor_frame(::std::string&& value) {
  set_has_sensor_frame();
  sensor_frame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:or_costmap.ParaObstacleLayer.sensor_frame)
}
#endif
void ParaObstacleLayer::set_sensor_frame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sensor_frame();
  sensor_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:or_costmap.ParaObstacleLayer.sensor_frame)
}
void ParaObstacleLayer::set_sensor_frame(const char* value, size_t size) {
  set_has_sensor_frame();
  sensor_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:or_costmap.ParaObstacleLayer.sensor_frame)
}
::std::string* ParaObstacleLayer::mutable_sensor_frame() {
  set_has_sensor_frame();
  // @@protoc_insertion_point(field_mutable:or_costmap.ParaObstacleLayer.sensor_frame)
  return sensor_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ParaObstacleLayer::release_sensor_frame() {
  // @@protoc_insertion_point(field_release:or_costmap.ParaObstacleLayer.sensor_frame)
  clear_has_sensor_frame();
  return sensor_frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ParaObstacleLayer::set_allocated_sensor_frame(::std::string* sensor_frame) {
  if (sensor_frame != NULL) {
    set_has_sensor_frame();
  } else {
    clear_has_sensor_frame();
  }
  sensor_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_frame);
  // @@protoc_insertion_point(field_set_allocated:or_costmap.ParaObstacleLayer.sensor_frame)
}

// required bool inf_is_valid = 10;
bool ParaObstacleLayer::has_inf_is_valid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ParaObstacleLayer::set_has_inf_is_valid() {
  _has_bits_[0] |= 0x00000200u;
}
void ParaObstacleLayer::clear_has_inf_is_valid() {
  _has_bits_[0] &= ~0x00000200u;
}
void ParaObstacleLayer::clear_inf_is_valid() {
  inf_is_valid_ = false;
  clear_has_inf_is_valid();
}
bool ParaObstacleLayer::inf_is_valid() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaObstacleLayer.inf_is_valid)
  return inf_is_valid_;
}
void ParaObstacleLayer::set_inf_is_valid(bool value) {
  set_has_inf_is_valid();
  inf_is_valid_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaObstacleLayer.inf_is_valid)
}

// required bool clearing = 11;
bool ParaObstacleLayer::has_clearing() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ParaObstacleLayer::set_has_clearing() {
  _has_bits_[0] |= 0x00000400u;
}
void ParaObstacleLayer::clear_has_clearing() {
  _has_bits_[0] &= ~0x00000400u;
}
void ParaObstacleLayer::clear_clearing() {
  clearing_ = false;
  clear_has_clearing();
}
bool ParaObstacleLayer::clearing() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaObstacleLayer.clearing)
  return clearing_;
}
void ParaObstacleLayer::set_clearing(bool value) {
  set_has_clearing();
  clearing_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaObstacleLayer.clearing)
}

// required bool marking = 12;
bool ParaObstacleLayer::has_marking() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ParaObstacleLayer::set_has_marking() {
  _has_bits_[0] |= 0x00000800u;
}
void ParaObstacleLayer::clear_has_marking() {
  _has_bits_[0] &= ~0x00000800u;
}
void ParaObstacleLayer::clear_marking() {
  marking_ = false;
  clear_has_marking();
}
bool ParaObstacleLayer::marking() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaObstacleLayer.marking)
  return marking_;
}
void ParaObstacleLayer::set_marking(bool value) {
  set_has_marking();
  marking_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaObstacleLayer.marking)
}

// required bool footprint_clearing_enabled = 13;
bool ParaObstacleLayer::has_footprint_clearing_enabled() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ParaObstacleLayer::set_has_footprint_clearing_enabled() {
  _has_bits_[0] |= 0x00001000u;
}
void ParaObstacleLayer::clear_has_footprint_clearing_enabled() {
  _has_bits_[0] &= ~0x00001000u;
}
void ParaObstacleLayer::clear_footprint_clearing_enabled() {
  footprint_clearing_enabled_ = false;
  clear_has_footprint_clearing_enabled();
}
bool ParaObstacleLayer::footprint_clearing_enabled() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaObstacleLayer.footprint_clearing_enabled)
  return footprint_clearing_enabled_;
}
void ParaObstacleLayer::set_footprint_clearing_enabled(bool value) {
  set_has_footprint_clearing_enabled();
  footprint_clearing_enabled_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaObstacleLayer.footprint_clearing_enabled)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace or_costmap

// @@protoc_insertion_point(global_scope)
