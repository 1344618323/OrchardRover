// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: timed_elastic_band.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "timed_elastic_band.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace or_local_planner {
class FrameIDDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FrameID>
     _instance;
} _FrameID_default_instance_;
class Point2DDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Point2D>
     _instance;
} _Point2D_default_instance_;
class TrajectoryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Trajectory>
     _instance;
} _Trajectory_default_instance_;
class FootprintModelDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<FootprintModel>
     _instance;
} _FootprintModel_default_instance_;
class RobotDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Robot>
     _instance;
} _Robot_default_instance_;
class GoalToleranceDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GoalTolerance>
     _instance;
} _GoalTolerance_default_instance_;
class ObstaclesDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Obstacles>
     _instance;
} _Obstacles_default_instance_;
class OptimizationDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Optimization>
     _instance;
} _Optimization_default_instance_;
class ConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Config>
     _instance;
} _Config_default_instance_;

namespace protobuf_timed_5felastic_5fband_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameID, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameID, odom_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameID, map_frame_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2D, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2D, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2D, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, teb_autosize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, dt_ref_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, dt_hysteresis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, global_plan_overwrite_orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, allow_init_with_backwards_motion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, global_plan_viapoint_sep_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, via_points_ordered_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, max_global_plan_lookahead_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, exact_arc_length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, force_reinit_new_goal_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, feasibility_check_no_poses_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, publish_feedback_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, min_samples_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trajectory, max_samples_),
  2,
  0,
  1,
  3,
  4,
  6,
  5,
  7,
  12,
  8,
  9,
  13,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FootprintModel, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FootprintModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FootprintModel, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FootprintModel, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FootprintModel, front_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FootprintModel, front_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FootprintModel, rear_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FootprintModel, rear_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FootprintModel, robot_vertices_),
  5,
  0,
  1,
  2,
  3,
  4,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, max_vel_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, max_vel_x_backwards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, max_vel_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, max_vel_theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, acc_lim_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, acc_lim_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, acc_lim_theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, min_turning_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, wheelbase_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Robot, cmd_angle_instead_rotvel_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalTolerance, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalTolerance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalTolerance, xy_goal_tolerance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalTolerance, yaw_goal_tolerance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoalTolerance, free_goal_vel_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, min_obstacle_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, costmap_obstacles_behind_robot_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, obstacle_association_cutoff_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Obstacles, obstacle_association_force_inclusion_factor_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, no_inner_iterations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, no_outer_iterations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, optimization_activate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, optimization_verbose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, penalty_epsilon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, weight_max_vel_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, weight_max_vel_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, weight_max_vel_theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, weight_acc_lim_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, weight_acc_lim_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, weight_acc_lim_thet_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, weight_kinematics_nh_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, weight_kinematics_forward_drive_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, weight_kinematics_turning_radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, weight_optimaltime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, weight_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, weight_inflation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, weight_dynamic_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, weight_viapoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, weight_adapt_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, weight_prefer_rotdir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimization, weight_acc_lim_theta_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, opt_frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, trajectory_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, kinematics_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, tolerance_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, obstacles_opt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, optimize_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Config, robot_type_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(FrameID)},
  { 9, 16, sizeof(Point2D)},
  { 18, 37, sizeof(Trajectory)},
  { 51, 63, sizeof(FootprintModel)},
  { 70, 85, sizeof(Robot)},
  { 95, 103, sizeof(GoalTolerance)},
  { 106, 115, sizeof(Obstacles)},
  { 119, 146, sizeof(Optimization)},
  { 168, 180, sizeof(Config)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_FrameID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Point2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Trajectory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FootprintModel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Robot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GoalTolerance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Obstacles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Optimization_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Config_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "timed_elastic_band.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _FrameID_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FrameID_default_instance_);_Point2D_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Point2D_default_instance_);_Trajectory_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Trajectory_default_instance_);_FootprintModel_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_FootprintModel_default_instance_);_Robot_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Robot_default_instance_);_GoalTolerance_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GoalTolerance_default_instance_);_Obstacles_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Obstacles_default_instance_);_Optimization_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Optimization_default_instance_);_Config_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Config_default_instance_);_Config_default_instance_._instance.get_mutable()->opt_frame_ = const_cast< ::or_local_planner::FrameID*>(
      ::or_local_planner::FrameID::internal_default_instance());
  _Config_default_instance_._instance.get_mutable()->trajectory_opt_ = const_cast< ::or_local_planner::Trajectory*>(
      ::or_local_planner::Trajectory::internal_default_instance());
  _Config_default_instance_._instance.get_mutable()->kinematics_opt_ = const_cast< ::or_local_planner::Robot*>(
      ::or_local_planner::Robot::internal_default_instance());
  _Config_default_instance_._instance.get_mutable()->tolerance_opt_ = const_cast< ::or_local_planner::GoalTolerance*>(
      ::or_local_planner::GoalTolerance::internal_default_instance());
  _Config_default_instance_._instance.get_mutable()->obstacles_opt_ = const_cast< ::or_local_planner::Obstacles*>(
      ::or_local_planner::Obstacles::internal_default_instance());
  _Config_default_instance_._instance.get_mutable()->optimize_info_ = const_cast< ::or_local_planner::Optimization*>(
      ::or_local_planner::Optimization::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030timed_elastic_band.proto\022\020or_local_pla"
      "nner\"0\n\007FrameID\022\022\n\nodom_frame\030\001 \001(\t\022\021\n\tm"
      "ap_frame\030\002 \001(\t\"\037\n\007Point2D\022\t\n\001x\030\001 \001(\002\022\t\n\001"
      "y\030\002 \001(\002\"\252\003\n\nTrajectory\022\024\n\014teb_autosize\030\001"
      " \001(\010\022\016\n\006dt_ref\030\002 \001(\002\022\025\n\rdt_hysteresis\030\003 "
      "\001(\002\022)\n!global_plan_overwrite_orientation"
      "\030\004 \001(\010\022(\n allow_init_with_backwards_moti"
      "on\030\005 \001(\010\022 \n\030global_plan_viapoint_sep\030\006 \001"
      "(\002\022\032\n\022via_points_ordered\030\007 \001(\010\022&\n\036max_gl"
      "obal_plan_lookahead_dist\030\010 \001(\002\022\030\n\020exact_"
      "arc_length\030\t \001(\010\022\"\n\032force_reinit_new_goa"
      "l_dist\030\n \001(\002\022\"\n\032feasibility_check_no_pos"
      "es\030\013 \001(\003\022\030\n\020publish_feedback\030\014 \001(\010\022\023\n\013mi"
      "n_samples\030\r \001(\003\022\023\n\013max_samples\030\016 \001(\003\"\270\002\n"
      "\016FootprintModel\022<\n\004type\030\001 \001(\0162..or_local"
      "_planner.FootprintModel.FootprintType\022\016\n"
      "\006radius\030\002 \001(\001\022\024\n\014front_offset\030\003 \001(\001\022\024\n\014f"
      "ront_radius\030\004 \001(\001\022\023\n\013rear_offset\030\005 \001(\001\022\023"
      "\n\013rear_radius\030\006 \001(\001\0221\n\016robot_vertices\030\007 "
      "\003(\0132\031.or_local_planner.Point2D\"O\n\rFootpr"
      "intType\022\t\n\005POINT\020\000\022\014\n\010CIRCULAR\020\001\022\016\n\nTWOC"
      "IRCLES\020\002\022\010\n\004LINE\020\003\022\013\n\007POLYGON\020\004\"\357\001\n\005Robo"
      "t\022\021\n\tmax_vel_x\030\001 \001(\002\022\033\n\023max_vel_x_backwa"
      "rds\030\002 \001(\002\022\021\n\tmax_vel_y\030\003 \001(\002\022\025\n\rmax_vel_"
      "theta\030\004 \001(\002\022\021\n\tacc_lim_x\030\005 \001(\002\022\021\n\tacc_li"
      "m_y\030\006 \001(\002\022\025\n\racc_lim_theta\030\007 \001(\002\022\032\n\022min_"
      "turning_radius\030\010 \001(\002\022\021\n\twheelbase\030\t \001(\002\022"
      " \n\030cmd_angle_instead_rotvel\030\n \001(\010\"]\n\rGoa"
      "lTolerance\022\031\n\021xy_goal_tolerance\030\001 \001(\002\022\032\n"
      "\022yaw_goal_tolerance\030\002 \001(\002\022\025\n\rfree_goal_v"
      "el\030\003 \001(\010\"\264\001\n\tObstacles\022\031\n\021min_obstacle_d"
      "ist\030\001 \001(\002\022+\n#costmap_obstacles_behind_ro"
      "bot_dist\030\002 \001(\002\022*\n\"obstacle_association_c"
      "utoff_factor\030\003 \001(\002\0223\n+obstacle_associati"
      "on_force_inclusion_factor\030\004 \001(\002\"\224\005\n\014Opti"
      "mization\022\033\n\023no_inner_iterations\030\001 \001(\005\022\033\n"
      "\023no_outer_iterations\030\002 \001(\005\022\035\n\025optimizati"
      "on_activate\030\003 \001(\010\022\034\n\024optimization_verbos"
      "e\030\004 \001(\010\022\027\n\017penalty_epsilon\030\005 \001(\002\022\030\n\020weig"
      "ht_max_vel_x\030\006 \001(\002\022\030\n\020weight_max_vel_y\030\007"
      " \001(\002\022\034\n\024weight_max_vel_theta\030\010 \001(\002\022\030\n\020we"
      "ight_acc_lim_x\030\t \001(\002\022\030\n\020weight_acc_lim_y"
      "\030\n \001(\002\022\033\n\023weight_acc_lim_thet\030\013 \001(\002\022\034\n\024w"
      "eight_kinematics_nh\030\014 \001(\002\022\'\n\037weight_kine"
      "matics_forward_drive\030\r \001(\002\022(\n weight_kin"
      "ematics_turning_radius\030\016 \001(\002\022\032\n\022weight_o"
      "ptimaltime\030\017 \001(\002\022\027\n\017weight_obstacle\030\020 \001("
      "\002\022\030\n\020weight_inflation\030\021 \001(\002\022\037\n\027weight_dy"
      "namic_obstacle\030\022 \001(\002\022\027\n\017weight_viapoint\030"
      "\023 \001(\002\022\033\n\023weight_adapt_factor\030\024 \001(\002\022\034\n\024we"
      "ight_prefer_rotdir\030\025 \001(\002\022\034\n\024weight_acc_l"
      "im_theta\030\026 \001(\002\"\366\002\n\006Config\022,\n\topt_frame\030\001"
      " \001(\0132\031.or_local_planner.FrameID\0224\n\016traje"
      "ctory_opt\030\002 \001(\0132\034.or_local_planner.Traje"
      "ctory\022/\n\016kinematics_opt\030\003 \001(\0132\027.or_local"
      "_planner.Robot\0226\n\rtolerance_opt\030\004 \001(\0132\037."
      "or_local_planner.GoalTolerance\0222\n\robstac"
      "les_opt\030\005 \001(\0132\033.or_local_planner.Obstacl"
      "es\0225\n\roptimize_info\030\006 \001(\0132\036.or_local_pla"
      "nner.Optimization\0224\n\nrobot_type\030\007 \003(\0132 ."
      "or_local_planner.FootprintModel"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2431);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "timed_elastic_band.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_timed_5felastic_5fband_2eproto

const ::google::protobuf::EnumDescriptor* FootprintModel_FootprintType_descriptor() {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_enum_descriptors[0];
}
bool FootprintModel_FootprintType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FootprintModel_FootprintType FootprintModel::POINT;
const FootprintModel_FootprintType FootprintModel::CIRCULAR;
const FootprintModel_FootprintType FootprintModel::TWOCIRCLES;
const FootprintModel_FootprintType FootprintModel::LINE;
const FootprintModel_FootprintType FootprintModel::POLYGON;
const FootprintModel_FootprintType FootprintModel::FootprintType_MIN;
const FootprintModel_FootprintType FootprintModel::FootprintType_MAX;
const int FootprintModel::FootprintType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameID::kOdomFrameFieldNumber;
const int FrameID::kMapFrameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameID::FrameID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:or_local_planner.FrameID)
}
FrameID::FrameID(const FrameID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  odom_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_odom_frame()) {
    odom_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.odom_frame_);
  }
  map_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_map_frame()) {
    map_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_frame_);
  }
  // @@protoc_insertion_point(copy_constructor:or_local_planner.FrameID)
}

void FrameID::SharedCtor() {
  _cached_size_ = 0;
  odom_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FrameID::~FrameID() {
  // @@protoc_insertion_point(destructor:or_local_planner.FrameID)
  SharedDtor();
}

void FrameID::SharedDtor() {
  odom_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FrameID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameID::descriptor() {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrameID& FrameID::default_instance() {
  protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrameID* FrameID::New(::google::protobuf::Arena* arena) const {
  FrameID* n = new FrameID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameID::Clear() {
// @@protoc_insertion_point(message_clear_start:or_local_planner.FrameID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!odom_frame_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*odom_frame_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!map_frame_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*map_frame_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrameID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:or_local_planner.FrameID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string odom_frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_odom_frame()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->odom_frame().data(), static_cast<int>(this->odom_frame().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "or_local_planner.FrameID.odom_frame");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string map_frame = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_frame()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_frame().data(), static_cast<int>(this->map_frame().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "or_local_planner.FrameID.map_frame");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:or_local_planner.FrameID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:or_local_planner.FrameID)
  return false;
#undef DO_
}

void FrameID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:or_local_planner.FrameID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string odom_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->odom_frame().data(), static_cast<int>(this->odom_frame().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "or_local_planner.FrameID.odom_frame");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->odom_frame(), output);
  }

  // optional string map_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_frame().data(), static_cast<int>(this->map_frame().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "or_local_planner.FrameID.map_frame");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->map_frame(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:or_local_planner.FrameID)
}

::google::protobuf::uint8* FrameID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:or_local_planner.FrameID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string odom_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->odom_frame().data(), static_cast<int>(this->odom_frame().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "or_local_planner.FrameID.odom_frame");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->odom_frame(), target);
  }

  // optional string map_frame = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_frame().data(), static_cast<int>(this->map_frame().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "or_local_planner.FrameID.map_frame");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->map_frame(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:or_local_planner.FrameID)
  return target;
}

size_t FrameID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:or_local_planner.FrameID)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string odom_frame = 1;
    if (has_odom_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->odom_frame());
    }

    // optional string map_frame = 2;
    if (has_map_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_frame());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:or_local_planner.FrameID)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:or_local_planner.FrameID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:or_local_planner.FrameID)
    MergeFrom(*source);
  }
}

void FrameID::MergeFrom(const FrameID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:or_local_planner.FrameID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_odom_frame();
      odom_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.odom_frame_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_map_frame();
      map_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_frame_);
    }
  }
}

void FrameID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:or_local_planner.FrameID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameID::CopyFrom(const FrameID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:or_local_planner.FrameID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameID::IsInitialized() const {
  return true;
}

void FrameID::Swap(FrameID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameID::InternalSwap(FrameID* other) {
  using std::swap;
  odom_frame_.Swap(&other->odom_frame_);
  map_frame_.Swap(&other->map_frame_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameID::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrameID

// optional string odom_frame = 1;
bool FrameID::has_odom_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrameID::set_has_odom_frame() {
  _has_bits_[0] |= 0x00000001u;
}
void FrameID::clear_has_odom_frame() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrameID::clear_odom_frame() {
  odom_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_odom_frame();
}
const ::std::string& FrameID::odom_frame() const {
  // @@protoc_insertion_point(field_get:or_local_planner.FrameID.odom_frame)
  return odom_frame_.GetNoArena();
}
void FrameID::set_odom_frame(const ::std::string& value) {
  set_has_odom_frame();
  odom_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:or_local_planner.FrameID.odom_frame)
}
#if LANG_CXX11
void FrameID::set_odom_frame(::std::string&& value) {
  set_has_odom_frame();
  odom_frame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:or_local_planner.FrameID.odom_frame)
}
#endif
void FrameID::set_odom_frame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_odom_frame();
  odom_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:or_local_planner.FrameID.odom_frame)
}
void FrameID::set_odom_frame(const char* value, size_t size) {
  set_has_odom_frame();
  odom_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:or_local_planner.FrameID.odom_frame)
}
::std::string* FrameID::mutable_odom_frame() {
  set_has_odom_frame();
  // @@protoc_insertion_point(field_mutable:or_local_planner.FrameID.odom_frame)
  return odom_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FrameID::release_odom_frame() {
  // @@protoc_insertion_point(field_release:or_local_planner.FrameID.odom_frame)
  clear_has_odom_frame();
  return odom_frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FrameID::set_allocated_odom_frame(::std::string* odom_frame) {
  if (odom_frame != NULL) {
    set_has_odom_frame();
  } else {
    clear_has_odom_frame();
  }
  odom_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), odom_frame);
  // @@protoc_insertion_point(field_set_allocated:or_local_planner.FrameID.odom_frame)
}

// optional string map_frame = 2;
bool FrameID::has_map_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FrameID::set_has_map_frame() {
  _has_bits_[0] |= 0x00000002u;
}
void FrameID::clear_has_map_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
void FrameID::clear_map_frame() {
  map_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_frame();
}
const ::std::string& FrameID::map_frame() const {
  // @@protoc_insertion_point(field_get:or_local_planner.FrameID.map_frame)
  return map_frame_.GetNoArena();
}
void FrameID::set_map_frame(const ::std::string& value) {
  set_has_map_frame();
  map_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:or_local_planner.FrameID.map_frame)
}
#if LANG_CXX11
void FrameID::set_map_frame(::std::string&& value) {
  set_has_map_frame();
  map_frame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:or_local_planner.FrameID.map_frame)
}
#endif
void FrameID::set_map_frame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_map_frame();
  map_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:or_local_planner.FrameID.map_frame)
}
void FrameID::set_map_frame(const char* value, size_t size) {
  set_has_map_frame();
  map_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:or_local_planner.FrameID.map_frame)
}
::std::string* FrameID::mutable_map_frame() {
  set_has_map_frame();
  // @@protoc_insertion_point(field_mutable:or_local_planner.FrameID.map_frame)
  return map_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FrameID::release_map_frame() {
  // @@protoc_insertion_point(field_release:or_local_planner.FrameID.map_frame)
  clear_has_map_frame();
  return map_frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FrameID::set_allocated_map_frame(::std::string* map_frame) {
  if (map_frame != NULL) {
    set_has_map_frame();
  } else {
    clear_has_map_frame();
  }
  map_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_frame);
  // @@protoc_insertion_point(field_set_allocated:or_local_planner.FrameID.map_frame)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point2D::kXFieldNumber;
const int Point2D::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point2D::Point2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:or_local_planner.Point2D)
}
Point2D::Point2D(const Point2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:or_local_planner.Point2D)
}

void Point2D::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point2D::~Point2D() {
  // @@protoc_insertion_point(destructor:or_local_planner.Point2D)
  SharedDtor();
}

void Point2D::SharedDtor() {
}

void Point2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point2D::descriptor() {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point2D& Point2D::default_instance() {
  protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point2D* Point2D::New(::google::protobuf::Arena* arena) const {
  Point2D* n = new Point2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point2D::Clear() {
// @@protoc_insertion_point(message_clear_start:or_local_planner.Point2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:or_local_planner.Point2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:or_local_planner.Point2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:or_local_planner.Point2D)
  return false;
#undef DO_
}

void Point2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:or_local_planner.Point2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:or_local_planner.Point2D)
}

::google::protobuf::uint8* Point2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:or_local_planner.Point2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:or_local_planner.Point2D)
  return target;
}

size_t Point2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:or_local_planner.Point2D)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:or_local_planner.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:or_local_planner.Point2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:or_local_planner.Point2D)
    MergeFrom(*source);
  }
}

void Point2D::MergeFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:or_local_planner.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:or_local_planner.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2D::CopyFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:or_local_planner.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2D::IsInitialized() const {
  return true;
}

void Point2D::Swap(Point2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point2D::InternalSwap(Point2D* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point2D::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point2D

// optional float x = 1;
bool Point2D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point2D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point2D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point2D::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Point2D::x() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Point2D.x)
  return x_;
}
void Point2D::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Point2D.x)
}

// optional float y = 2;
bool Point2D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point2D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point2D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point2D::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Point2D::y() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Point2D.y)
  return y_;
}
void Point2D::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Point2D.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Trajectory::kTebAutosizeFieldNumber;
const int Trajectory::kDtRefFieldNumber;
const int Trajectory::kDtHysteresisFieldNumber;
const int Trajectory::kGlobalPlanOverwriteOrientationFieldNumber;
const int Trajectory::kAllowInitWithBackwardsMotionFieldNumber;
const int Trajectory::kGlobalPlanViapointSepFieldNumber;
const int Trajectory::kViaPointsOrderedFieldNumber;
const int Trajectory::kMaxGlobalPlanLookaheadDistFieldNumber;
const int Trajectory::kExactArcLengthFieldNumber;
const int Trajectory::kForceReinitNewGoalDistFieldNumber;
const int Trajectory::kFeasibilityCheckNoPosesFieldNumber;
const int Trajectory::kPublishFeedbackFieldNumber;
const int Trajectory::kMinSamplesFieldNumber;
const int Trajectory::kMaxSamplesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Trajectory::Trajectory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:or_local_planner.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dt_ref_, &from.dt_ref_,
    static_cast<size_t>(reinterpret_cast<char*>(&publish_feedback_) -
    reinterpret_cast<char*>(&dt_ref_)) + sizeof(publish_feedback_));
  // @@protoc_insertion_point(copy_constructor:or_local_planner.Trajectory)
}

void Trajectory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&dt_ref_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&publish_feedback_) -
      reinterpret_cast<char*>(&dt_ref_)) + sizeof(publish_feedback_));
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:or_local_planner.Trajectory)
  SharedDtor();
}

void Trajectory::SharedDtor() {
}

void Trajectory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trajectory::descriptor() {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Trajectory& Trajectory::default_instance() {
  protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  return *internal_default_instance();
}

Trajectory* Trajectory::New(::google::protobuf::Arena* arena) const {
  Trajectory* n = new Trajectory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:or_local_planner.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&dt_ref_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_global_plan_lookahead_dist_) -
        reinterpret_cast<char*>(&dt_ref_)) + sizeof(max_global_plan_lookahead_dist_));
  }
  if (cached_has_bits & 16128u) {
    ::memset(&force_reinit_new_goal_dist_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&publish_feedback_) -
        reinterpret_cast<char*>(&force_reinit_new_goal_dist_)) + sizeof(publish_feedback_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Trajectory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:or_local_planner.Trajectory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool teb_autosize = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_teb_autosize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &teb_autosize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dt_ref = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_dt_ref();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dt_ref_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dt_hysteresis = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_dt_hysteresis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dt_hysteresis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool global_plan_overwrite_orientation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_global_plan_overwrite_orientation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &global_plan_overwrite_orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_init_with_backwards_motion = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_allow_init_with_backwards_motion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_init_with_backwards_motion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float global_plan_viapoint_sep = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_global_plan_viapoint_sep();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &global_plan_viapoint_sep_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool via_points_ordered = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_via_points_ordered();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &via_points_ordered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_global_plan_lookahead_dist = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_max_global_plan_lookahead_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_global_plan_lookahead_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exact_arc_length = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_exact_arc_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exact_arc_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float force_reinit_new_goal_dist = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_force_reinit_new_goal_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &force_reinit_new_goal_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 feasibility_check_no_poses = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_feasibility_check_no_poses();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &feasibility_check_no_poses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool publish_feedback = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          set_has_publish_feedback();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &publish_feedback_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 min_samples = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {
          set_has_min_samples();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &min_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 max_samples = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u /* 112 & 0xFF */)) {
          set_has_max_samples();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:or_local_planner.Trajectory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:or_local_planner.Trajectory)
  return false;
#undef DO_
}

void Trajectory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:or_local_planner.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool teb_autosize = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->teb_autosize(), output);
  }

  // optional float dt_ref = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->dt_ref(), output);
  }

  // optional float dt_hysteresis = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dt_hysteresis(), output);
  }

  // optional bool global_plan_overwrite_orientation = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->global_plan_overwrite_orientation(), output);
  }

  // optional bool allow_init_with_backwards_motion = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->allow_init_with_backwards_motion(), output);
  }

  // optional float global_plan_viapoint_sep = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->global_plan_viapoint_sep(), output);
  }

  // optional bool via_points_ordered = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->via_points_ordered(), output);
  }

  // optional float max_global_plan_lookahead_dist = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->max_global_plan_lookahead_dist(), output);
  }

  // optional bool exact_arc_length = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->exact_arc_length(), output);
  }

  // optional float force_reinit_new_goal_dist = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->force_reinit_new_goal_dist(), output);
  }

  // optional int64 feasibility_check_no_poses = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->feasibility_check_no_poses(), output);
  }

  // optional bool publish_feedback = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->publish_feedback(), output);
  }

  // optional int64 min_samples = 13;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->min_samples(), output);
  }

  // optional int64 max_samples = 14;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->max_samples(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:or_local_planner.Trajectory)
}

::google::protobuf::uint8* Trajectory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:or_local_planner.Trajectory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool teb_autosize = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->teb_autosize(), target);
  }

  // optional float dt_ref = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->dt_ref(), target);
  }

  // optional float dt_hysteresis = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dt_hysteresis(), target);
  }

  // optional bool global_plan_overwrite_orientation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->global_plan_overwrite_orientation(), target);
  }

  // optional bool allow_init_with_backwards_motion = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->allow_init_with_backwards_motion(), target);
  }

  // optional float global_plan_viapoint_sep = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->global_plan_viapoint_sep(), target);
  }

  // optional bool via_points_ordered = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->via_points_ordered(), target);
  }

  // optional float max_global_plan_lookahead_dist = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->max_global_plan_lookahead_dist(), target);
  }

  // optional bool exact_arc_length = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->exact_arc_length(), target);
  }

  // optional float force_reinit_new_goal_dist = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->force_reinit_new_goal_dist(), target);
  }

  // optional int64 feasibility_check_no_poses = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->feasibility_check_no_poses(), target);
  }

  // optional bool publish_feedback = 12;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->publish_feedback(), target);
  }

  // optional int64 min_samples = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->min_samples(), target);
  }

  // optional int64 max_samples = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->max_samples(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:or_local_planner.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:or_local_planner.Trajectory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float dt_ref = 2;
    if (has_dt_ref()) {
      total_size += 1 + 4;
    }

    // optional float dt_hysteresis = 3;
    if (has_dt_hysteresis()) {
      total_size += 1 + 4;
    }

    // optional bool teb_autosize = 1;
    if (has_teb_autosize()) {
      total_size += 1 + 1;
    }

    // optional bool global_plan_overwrite_orientation = 4;
    if (has_global_plan_overwrite_orientation()) {
      total_size += 1 + 1;
    }

    // optional bool allow_init_with_backwards_motion = 5;
    if (has_allow_init_with_backwards_motion()) {
      total_size += 1 + 1;
    }

    // optional bool via_points_ordered = 7;
    if (has_via_points_ordered()) {
      total_size += 1 + 1;
    }

    // optional float global_plan_viapoint_sep = 6;
    if (has_global_plan_viapoint_sep()) {
      total_size += 1 + 4;
    }

    // optional float max_global_plan_lookahead_dist = 8;
    if (has_max_global_plan_lookahead_dist()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional float force_reinit_new_goal_dist = 10;
    if (has_force_reinit_new_goal_dist()) {
      total_size += 1 + 4;
    }

    // optional int64 feasibility_check_no_poses = 11;
    if (has_feasibility_check_no_poses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->feasibility_check_no_poses());
    }

    // optional int64 min_samples = 13;
    if (has_min_samples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->min_samples());
    }

    // optional int64 max_samples = 14;
    if (has_max_samples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_samples());
    }

    // optional bool exact_arc_length = 9;
    if (has_exact_arc_length()) {
      total_size += 1 + 1;
    }

    // optional bool publish_feedback = 12;
    if (has_publish_feedback()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trajectory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:or_local_planner.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  const Trajectory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Trajectory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:or_local_planner.Trajectory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:or_local_planner.Trajectory)
    MergeFrom(*source);
  }
}

void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:or_local_planner.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      dt_ref_ = from.dt_ref_;
    }
    if (cached_has_bits & 0x00000002u) {
      dt_hysteresis_ = from.dt_hysteresis_;
    }
    if (cached_has_bits & 0x00000004u) {
      teb_autosize_ = from.teb_autosize_;
    }
    if (cached_has_bits & 0x00000008u) {
      global_plan_overwrite_orientation_ = from.global_plan_overwrite_orientation_;
    }
    if (cached_has_bits & 0x00000010u) {
      allow_init_with_backwards_motion_ = from.allow_init_with_backwards_motion_;
    }
    if (cached_has_bits & 0x00000020u) {
      via_points_ordered_ = from.via_points_ordered_;
    }
    if (cached_has_bits & 0x00000040u) {
      global_plan_viapoint_sep_ = from.global_plan_viapoint_sep_;
    }
    if (cached_has_bits & 0x00000080u) {
      max_global_plan_lookahead_dist_ = from.max_global_plan_lookahead_dist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      force_reinit_new_goal_dist_ = from.force_reinit_new_goal_dist_;
    }
    if (cached_has_bits & 0x00000200u) {
      feasibility_check_no_poses_ = from.feasibility_check_no_poses_;
    }
    if (cached_has_bits & 0x00000400u) {
      min_samples_ = from.min_samples_;
    }
    if (cached_has_bits & 0x00000800u) {
      max_samples_ = from.max_samples_;
    }
    if (cached_has_bits & 0x00001000u) {
      exact_arc_length_ = from.exact_arc_length_;
    }
    if (cached_has_bits & 0x00002000u) {
      publish_feedback_ = from.publish_feedback_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Trajectory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:or_local_planner.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:or_local_planner.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::Swap(Trajectory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  swap(dt_ref_, other->dt_ref_);
  swap(dt_hysteresis_, other->dt_hysteresis_);
  swap(teb_autosize_, other->teb_autosize_);
  swap(global_plan_overwrite_orientation_, other->global_plan_overwrite_orientation_);
  swap(allow_init_with_backwards_motion_, other->allow_init_with_backwards_motion_);
  swap(via_points_ordered_, other->via_points_ordered_);
  swap(global_plan_viapoint_sep_, other->global_plan_viapoint_sep_);
  swap(max_global_plan_lookahead_dist_, other->max_global_plan_lookahead_dist_);
  swap(force_reinit_new_goal_dist_, other->force_reinit_new_goal_dist_);
  swap(feasibility_check_no_poses_, other->feasibility_check_no_poses_);
  swap(min_samples_, other->min_samples_);
  swap(max_samples_, other->max_samples_);
  swap(exact_arc_length_, other->exact_arc_length_);
  swap(publish_feedback_, other->publish_feedback_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Trajectory::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Trajectory

// optional bool teb_autosize = 1;
bool Trajectory::has_teb_autosize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Trajectory::set_has_teb_autosize() {
  _has_bits_[0] |= 0x00000004u;
}
void Trajectory::clear_has_teb_autosize() {
  _has_bits_[0] &= ~0x00000004u;
}
void Trajectory::clear_teb_autosize() {
  teb_autosize_ = false;
  clear_has_teb_autosize();
}
bool Trajectory::teb_autosize() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Trajectory.teb_autosize)
  return teb_autosize_;
}
void Trajectory::set_teb_autosize(bool value) {
  set_has_teb_autosize();
  teb_autosize_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Trajectory.teb_autosize)
}

// optional float dt_ref = 2;
bool Trajectory::has_dt_ref() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Trajectory::set_has_dt_ref() {
  _has_bits_[0] |= 0x00000001u;
}
void Trajectory::clear_has_dt_ref() {
  _has_bits_[0] &= ~0x00000001u;
}
void Trajectory::clear_dt_ref() {
  dt_ref_ = 0;
  clear_has_dt_ref();
}
float Trajectory::dt_ref() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Trajectory.dt_ref)
  return dt_ref_;
}
void Trajectory::set_dt_ref(float value) {
  set_has_dt_ref();
  dt_ref_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Trajectory.dt_ref)
}

// optional float dt_hysteresis = 3;
bool Trajectory::has_dt_hysteresis() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Trajectory::set_has_dt_hysteresis() {
  _has_bits_[0] |= 0x00000002u;
}
void Trajectory::clear_has_dt_hysteresis() {
  _has_bits_[0] &= ~0x00000002u;
}
void Trajectory::clear_dt_hysteresis() {
  dt_hysteresis_ = 0;
  clear_has_dt_hysteresis();
}
float Trajectory::dt_hysteresis() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Trajectory.dt_hysteresis)
  return dt_hysteresis_;
}
void Trajectory::set_dt_hysteresis(float value) {
  set_has_dt_hysteresis();
  dt_hysteresis_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Trajectory.dt_hysteresis)
}

// optional bool global_plan_overwrite_orientation = 4;
bool Trajectory::has_global_plan_overwrite_orientation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Trajectory::set_has_global_plan_overwrite_orientation() {
  _has_bits_[0] |= 0x00000008u;
}
void Trajectory::clear_has_global_plan_overwrite_orientation() {
  _has_bits_[0] &= ~0x00000008u;
}
void Trajectory::clear_global_plan_overwrite_orientation() {
  global_plan_overwrite_orientation_ = false;
  clear_has_global_plan_overwrite_orientation();
}
bool Trajectory::global_plan_overwrite_orientation() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Trajectory.global_plan_overwrite_orientation)
  return global_plan_overwrite_orientation_;
}
void Trajectory::set_global_plan_overwrite_orientation(bool value) {
  set_has_global_plan_overwrite_orientation();
  global_plan_overwrite_orientation_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Trajectory.global_plan_overwrite_orientation)
}

// optional bool allow_init_with_backwards_motion = 5;
bool Trajectory::has_allow_init_with_backwards_motion() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Trajectory::set_has_allow_init_with_backwards_motion() {
  _has_bits_[0] |= 0x00000010u;
}
void Trajectory::clear_has_allow_init_with_backwards_motion() {
  _has_bits_[0] &= ~0x00000010u;
}
void Trajectory::clear_allow_init_with_backwards_motion() {
  allow_init_with_backwards_motion_ = false;
  clear_has_allow_init_with_backwards_motion();
}
bool Trajectory::allow_init_with_backwards_motion() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Trajectory.allow_init_with_backwards_motion)
  return allow_init_with_backwards_motion_;
}
void Trajectory::set_allow_init_with_backwards_motion(bool value) {
  set_has_allow_init_with_backwards_motion();
  allow_init_with_backwards_motion_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Trajectory.allow_init_with_backwards_motion)
}

// optional float global_plan_viapoint_sep = 6;
bool Trajectory::has_global_plan_viapoint_sep() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Trajectory::set_has_global_plan_viapoint_sep() {
  _has_bits_[0] |= 0x00000040u;
}
void Trajectory::clear_has_global_plan_viapoint_sep() {
  _has_bits_[0] &= ~0x00000040u;
}
void Trajectory::clear_global_plan_viapoint_sep() {
  global_plan_viapoint_sep_ = 0;
  clear_has_global_plan_viapoint_sep();
}
float Trajectory::global_plan_viapoint_sep() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Trajectory.global_plan_viapoint_sep)
  return global_plan_viapoint_sep_;
}
void Trajectory::set_global_plan_viapoint_sep(float value) {
  set_has_global_plan_viapoint_sep();
  global_plan_viapoint_sep_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Trajectory.global_plan_viapoint_sep)
}

// optional bool via_points_ordered = 7;
bool Trajectory::has_via_points_ordered() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Trajectory::set_has_via_points_ordered() {
  _has_bits_[0] |= 0x00000020u;
}
void Trajectory::clear_has_via_points_ordered() {
  _has_bits_[0] &= ~0x00000020u;
}
void Trajectory::clear_via_points_ordered() {
  via_points_ordered_ = false;
  clear_has_via_points_ordered();
}
bool Trajectory::via_points_ordered() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Trajectory.via_points_ordered)
  return via_points_ordered_;
}
void Trajectory::set_via_points_ordered(bool value) {
  set_has_via_points_ordered();
  via_points_ordered_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Trajectory.via_points_ordered)
}

// optional float max_global_plan_lookahead_dist = 8;
bool Trajectory::has_max_global_plan_lookahead_dist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Trajectory::set_has_max_global_plan_lookahead_dist() {
  _has_bits_[0] |= 0x00000080u;
}
void Trajectory::clear_has_max_global_plan_lookahead_dist() {
  _has_bits_[0] &= ~0x00000080u;
}
void Trajectory::clear_max_global_plan_lookahead_dist() {
  max_global_plan_lookahead_dist_ = 0;
  clear_has_max_global_plan_lookahead_dist();
}
float Trajectory::max_global_plan_lookahead_dist() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Trajectory.max_global_plan_lookahead_dist)
  return max_global_plan_lookahead_dist_;
}
void Trajectory::set_max_global_plan_lookahead_dist(float value) {
  set_has_max_global_plan_lookahead_dist();
  max_global_plan_lookahead_dist_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Trajectory.max_global_plan_lookahead_dist)
}

// optional bool exact_arc_length = 9;
bool Trajectory::has_exact_arc_length() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Trajectory::set_has_exact_arc_length() {
  _has_bits_[0] |= 0x00001000u;
}
void Trajectory::clear_has_exact_arc_length() {
  _has_bits_[0] &= ~0x00001000u;
}
void Trajectory::clear_exact_arc_length() {
  exact_arc_length_ = false;
  clear_has_exact_arc_length();
}
bool Trajectory::exact_arc_length() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Trajectory.exact_arc_length)
  return exact_arc_length_;
}
void Trajectory::set_exact_arc_length(bool value) {
  set_has_exact_arc_length();
  exact_arc_length_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Trajectory.exact_arc_length)
}

// optional float force_reinit_new_goal_dist = 10;
bool Trajectory::has_force_reinit_new_goal_dist() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Trajectory::set_has_force_reinit_new_goal_dist() {
  _has_bits_[0] |= 0x00000100u;
}
void Trajectory::clear_has_force_reinit_new_goal_dist() {
  _has_bits_[0] &= ~0x00000100u;
}
void Trajectory::clear_force_reinit_new_goal_dist() {
  force_reinit_new_goal_dist_ = 0;
  clear_has_force_reinit_new_goal_dist();
}
float Trajectory::force_reinit_new_goal_dist() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Trajectory.force_reinit_new_goal_dist)
  return force_reinit_new_goal_dist_;
}
void Trajectory::set_force_reinit_new_goal_dist(float value) {
  set_has_force_reinit_new_goal_dist();
  force_reinit_new_goal_dist_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Trajectory.force_reinit_new_goal_dist)
}

// optional int64 feasibility_check_no_poses = 11;
bool Trajectory::has_feasibility_check_no_poses() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Trajectory::set_has_feasibility_check_no_poses() {
  _has_bits_[0] |= 0x00000200u;
}
void Trajectory::clear_has_feasibility_check_no_poses() {
  _has_bits_[0] &= ~0x00000200u;
}
void Trajectory::clear_feasibility_check_no_poses() {
  feasibility_check_no_poses_ = GOOGLE_LONGLONG(0);
  clear_has_feasibility_check_no_poses();
}
::google::protobuf::int64 Trajectory::feasibility_check_no_poses() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Trajectory.feasibility_check_no_poses)
  return feasibility_check_no_poses_;
}
void Trajectory::set_feasibility_check_no_poses(::google::protobuf::int64 value) {
  set_has_feasibility_check_no_poses();
  feasibility_check_no_poses_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Trajectory.feasibility_check_no_poses)
}

// optional bool publish_feedback = 12;
bool Trajectory::has_publish_feedback() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Trajectory::set_has_publish_feedback() {
  _has_bits_[0] |= 0x00002000u;
}
void Trajectory::clear_has_publish_feedback() {
  _has_bits_[0] &= ~0x00002000u;
}
void Trajectory::clear_publish_feedback() {
  publish_feedback_ = false;
  clear_has_publish_feedback();
}
bool Trajectory::publish_feedback() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Trajectory.publish_feedback)
  return publish_feedback_;
}
void Trajectory::set_publish_feedback(bool value) {
  set_has_publish_feedback();
  publish_feedback_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Trajectory.publish_feedback)
}

// optional int64 min_samples = 13;
bool Trajectory::has_min_samples() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Trajectory::set_has_min_samples() {
  _has_bits_[0] |= 0x00000400u;
}
void Trajectory::clear_has_min_samples() {
  _has_bits_[0] &= ~0x00000400u;
}
void Trajectory::clear_min_samples() {
  min_samples_ = GOOGLE_LONGLONG(0);
  clear_has_min_samples();
}
::google::protobuf::int64 Trajectory::min_samples() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Trajectory.min_samples)
  return min_samples_;
}
void Trajectory::set_min_samples(::google::protobuf::int64 value) {
  set_has_min_samples();
  min_samples_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Trajectory.min_samples)
}

// optional int64 max_samples = 14;
bool Trajectory::has_max_samples() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Trajectory::set_has_max_samples() {
  _has_bits_[0] |= 0x00000800u;
}
void Trajectory::clear_has_max_samples() {
  _has_bits_[0] &= ~0x00000800u;
}
void Trajectory::clear_max_samples() {
  max_samples_ = GOOGLE_LONGLONG(0);
  clear_has_max_samples();
}
::google::protobuf::int64 Trajectory::max_samples() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Trajectory.max_samples)
  return max_samples_;
}
void Trajectory::set_max_samples(::google::protobuf::int64 value) {
  set_has_max_samples();
  max_samples_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Trajectory.max_samples)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FootprintModel::kTypeFieldNumber;
const int FootprintModel::kRadiusFieldNumber;
const int FootprintModel::kFrontOffsetFieldNumber;
const int FootprintModel::kFrontRadiusFieldNumber;
const int FootprintModel::kRearOffsetFieldNumber;
const int FootprintModel::kRearRadiusFieldNumber;
const int FootprintModel::kRobotVerticesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FootprintModel::FootprintModel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:or_local_planner.FootprintModel)
}
FootprintModel::FootprintModel(const FootprintModel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      robot_vertices_(from.robot_vertices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:or_local_planner.FootprintModel)
}

void FootprintModel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&radius_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&radius_)) + sizeof(type_));
}

FootprintModel::~FootprintModel() {
  // @@protoc_insertion_point(destructor:or_local_planner.FootprintModel)
  SharedDtor();
}

void FootprintModel::SharedDtor() {
}

void FootprintModel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FootprintModel::descriptor() {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FootprintModel& FootprintModel::default_instance() {
  protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  return *internal_default_instance();
}

FootprintModel* FootprintModel::New(::google::protobuf::Arena* arena) const {
  FootprintModel* n = new FootprintModel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FootprintModel::Clear() {
// @@protoc_insertion_point(message_clear_start:or_local_planner.FootprintModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_vertices_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&radius_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FootprintModel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:or_local_planner.FootprintModel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .or_local_planner.FootprintModel.FootprintType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::or_local_planner::FootprintModel_FootprintType_IsValid(value)) {
            set_type(static_cast< ::or_local_planner::FootprintModel_FootprintType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double radius = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double front_offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_front_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double front_radius = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_front_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rear_offset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_rear_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rear_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double rear_radius = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_rear_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rear_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .or_local_planner.Point2D robot_vertices = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robot_vertices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:or_local_planner.FootprintModel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:or_local_planner.FootprintModel)
  return false;
#undef DO_
}

void FootprintModel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:or_local_planner.FootprintModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .or_local_planner.FootprintModel.FootprintType type = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional double radius = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->radius(), output);
  }

  // optional double front_offset = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->front_offset(), output);
  }

  // optional double front_radius = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->front_radius(), output);
  }

  // optional double rear_offset = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->rear_offset(), output);
  }

  // optional double rear_radius = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->rear_radius(), output);
  }

  // repeated .or_local_planner.Point2D robot_vertices = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robot_vertices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->robot_vertices(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:or_local_planner.FootprintModel)
}

::google::protobuf::uint8* FootprintModel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:or_local_planner.FootprintModel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .or_local_planner.FootprintModel.FootprintType type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional double radius = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->radius(), target);
  }

  // optional double front_offset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->front_offset(), target);
  }

  // optional double front_radius = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->front_radius(), target);
  }

  // optional double rear_offset = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->rear_offset(), target);
  }

  // optional double rear_radius = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->rear_radius(), target);
  }

  // repeated .or_local_planner.Point2D robot_vertices = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robot_vertices_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->robot_vertices(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:or_local_planner.FootprintModel)
  return target;
}

size_t FootprintModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:or_local_planner.FootprintModel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .or_local_planner.Point2D robot_vertices = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->robot_vertices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robot_vertices(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional double radius = 2;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // optional double front_offset = 3;
    if (has_front_offset()) {
      total_size += 1 + 8;
    }

    // optional double front_radius = 4;
    if (has_front_radius()) {
      total_size += 1 + 8;
    }

    // optional double rear_offset = 5;
    if (has_rear_offset()) {
      total_size += 1 + 8;
    }

    // optional double rear_radius = 6;
    if (has_rear_radius()) {
      total_size += 1 + 8;
    }

    // optional .or_local_planner.FootprintModel.FootprintType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FootprintModel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:or_local_planner.FootprintModel)
  GOOGLE_DCHECK_NE(&from, this);
  const FootprintModel* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FootprintModel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:or_local_planner.FootprintModel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:or_local_planner.FootprintModel)
    MergeFrom(*source);
  }
}

void FootprintModel::MergeFrom(const FootprintModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:or_local_planner.FootprintModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robot_vertices_.MergeFrom(from.robot_vertices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000002u) {
      front_offset_ = from.front_offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      front_radius_ = from.front_radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      rear_offset_ = from.rear_offset_;
    }
    if (cached_has_bits & 0x00000010u) {
      rear_radius_ = from.rear_radius_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FootprintModel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:or_local_planner.FootprintModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FootprintModel::CopyFrom(const FootprintModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:or_local_planner.FootprintModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FootprintModel::IsInitialized() const {
  return true;
}

void FootprintModel::Swap(FootprintModel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FootprintModel::InternalSwap(FootprintModel* other) {
  using std::swap;
  robot_vertices_.InternalSwap(&other->robot_vertices_);
  swap(radius_, other->radius_);
  swap(front_offset_, other->front_offset_);
  swap(front_radius_, other->front_radius_);
  swap(rear_offset_, other->rear_offset_);
  swap(rear_radius_, other->rear_radius_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FootprintModel::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FootprintModel

// optional .or_local_planner.FootprintModel.FootprintType type = 1;
bool FootprintModel::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FootprintModel::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void FootprintModel::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void FootprintModel::clear_type() {
  type_ = 0;
  clear_has_type();
}
::or_local_planner::FootprintModel_FootprintType FootprintModel::type() const {
  // @@protoc_insertion_point(field_get:or_local_planner.FootprintModel.type)
  return static_cast< ::or_local_planner::FootprintModel_FootprintType >(type_);
}
void FootprintModel::set_type(::or_local_planner::FootprintModel_FootprintType value) {
  assert(::or_local_planner::FootprintModel_FootprintType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.FootprintModel.type)
}

// optional double radius = 2;
bool FootprintModel::has_radius() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FootprintModel::set_has_radius() {
  _has_bits_[0] |= 0x00000001u;
}
void FootprintModel::clear_has_radius() {
  _has_bits_[0] &= ~0x00000001u;
}
void FootprintModel::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
double FootprintModel::radius() const {
  // @@protoc_insertion_point(field_get:or_local_planner.FootprintModel.radius)
  return radius_;
}
void FootprintModel::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.FootprintModel.radius)
}

// optional double front_offset = 3;
bool FootprintModel::has_front_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FootprintModel::set_has_front_offset() {
  _has_bits_[0] |= 0x00000002u;
}
void FootprintModel::clear_has_front_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
void FootprintModel::clear_front_offset() {
  front_offset_ = 0;
  clear_has_front_offset();
}
double FootprintModel::front_offset() const {
  // @@protoc_insertion_point(field_get:or_local_planner.FootprintModel.front_offset)
  return front_offset_;
}
void FootprintModel::set_front_offset(double value) {
  set_has_front_offset();
  front_offset_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.FootprintModel.front_offset)
}

// optional double front_radius = 4;
bool FootprintModel::has_front_radius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FootprintModel::set_has_front_radius() {
  _has_bits_[0] |= 0x00000004u;
}
void FootprintModel::clear_has_front_radius() {
  _has_bits_[0] &= ~0x00000004u;
}
void FootprintModel::clear_front_radius() {
  front_radius_ = 0;
  clear_has_front_radius();
}
double FootprintModel::front_radius() const {
  // @@protoc_insertion_point(field_get:or_local_planner.FootprintModel.front_radius)
  return front_radius_;
}
void FootprintModel::set_front_radius(double value) {
  set_has_front_radius();
  front_radius_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.FootprintModel.front_radius)
}

// optional double rear_offset = 5;
bool FootprintModel::has_rear_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FootprintModel::set_has_rear_offset() {
  _has_bits_[0] |= 0x00000008u;
}
void FootprintModel::clear_has_rear_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
void FootprintModel::clear_rear_offset() {
  rear_offset_ = 0;
  clear_has_rear_offset();
}
double FootprintModel::rear_offset() const {
  // @@protoc_insertion_point(field_get:or_local_planner.FootprintModel.rear_offset)
  return rear_offset_;
}
void FootprintModel::set_rear_offset(double value) {
  set_has_rear_offset();
  rear_offset_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.FootprintModel.rear_offset)
}

// optional double rear_radius = 6;
bool FootprintModel::has_rear_radius() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FootprintModel::set_has_rear_radius() {
  _has_bits_[0] |= 0x00000010u;
}
void FootprintModel::clear_has_rear_radius() {
  _has_bits_[0] &= ~0x00000010u;
}
void FootprintModel::clear_rear_radius() {
  rear_radius_ = 0;
  clear_has_rear_radius();
}
double FootprintModel::rear_radius() const {
  // @@protoc_insertion_point(field_get:or_local_planner.FootprintModel.rear_radius)
  return rear_radius_;
}
void FootprintModel::set_rear_radius(double value) {
  set_has_rear_radius();
  rear_radius_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.FootprintModel.rear_radius)
}

// repeated .or_local_planner.Point2D robot_vertices = 7;
int FootprintModel::robot_vertices_size() const {
  return robot_vertices_.size();
}
void FootprintModel::clear_robot_vertices() {
  robot_vertices_.Clear();
}
const ::or_local_planner::Point2D& FootprintModel::robot_vertices(int index) const {
  // @@protoc_insertion_point(field_get:or_local_planner.FootprintModel.robot_vertices)
  return robot_vertices_.Get(index);
}
::or_local_planner::Point2D* FootprintModel::mutable_robot_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:or_local_planner.FootprintModel.robot_vertices)
  return robot_vertices_.Mutable(index);
}
::or_local_planner::Point2D* FootprintModel::add_robot_vertices() {
  // @@protoc_insertion_point(field_add:or_local_planner.FootprintModel.robot_vertices)
  return robot_vertices_.Add();
}
::google::protobuf::RepeatedPtrField< ::or_local_planner::Point2D >*
FootprintModel::mutable_robot_vertices() {
  // @@protoc_insertion_point(field_mutable_list:or_local_planner.FootprintModel.robot_vertices)
  return &robot_vertices_;
}
const ::google::protobuf::RepeatedPtrField< ::or_local_planner::Point2D >&
FootprintModel::robot_vertices() const {
  // @@protoc_insertion_point(field_list:or_local_planner.FootprintModel.robot_vertices)
  return robot_vertices_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Robot::kMaxVelXFieldNumber;
const int Robot::kMaxVelXBackwardsFieldNumber;
const int Robot::kMaxVelYFieldNumber;
const int Robot::kMaxVelThetaFieldNumber;
const int Robot::kAccLimXFieldNumber;
const int Robot::kAccLimYFieldNumber;
const int Robot::kAccLimThetaFieldNumber;
const int Robot::kMinTurningRadiusFieldNumber;
const int Robot::kWheelbaseFieldNumber;
const int Robot::kCmdAngleInsteadRotvelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Robot::Robot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:or_local_planner.Robot)
}
Robot::Robot(const Robot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&max_vel_x_, &from.max_vel_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_angle_instead_rotvel_) -
    reinterpret_cast<char*>(&max_vel_x_)) + sizeof(cmd_angle_instead_rotvel_));
  // @@protoc_insertion_point(copy_constructor:or_local_planner.Robot)
}

void Robot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&max_vel_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_angle_instead_rotvel_) -
      reinterpret_cast<char*>(&max_vel_x_)) + sizeof(cmd_angle_instead_rotvel_));
}

Robot::~Robot() {
  // @@protoc_insertion_point(destructor:or_local_planner.Robot)
  SharedDtor();
}

void Robot::SharedDtor() {
}

void Robot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Robot::descriptor() {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Robot& Robot::default_instance() {
  protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  return *internal_default_instance();
}

Robot* Robot::New(::google::protobuf::Arena* arena) const {
  Robot* n = new Robot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:or_local_planner.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&max_vel_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_turning_radius_) -
        reinterpret_cast<char*>(&max_vel_x_)) + sizeof(min_turning_radius_));
  }
  if (cached_has_bits & 768u) {
    ::memset(&wheelbase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cmd_angle_instead_rotvel_) -
        reinterpret_cast<char*>(&wheelbase_)) + sizeof(cmd_angle_instead_rotvel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Robot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:or_local_planner.Robot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float max_vel_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_max_vel_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_vel_x_backwards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_max_vel_x_backwards();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_vel_x_backwards_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_vel_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_max_vel_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_vel_theta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_max_vel_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_vel_theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_lim_x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_acc_lim_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_lim_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_lim_y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_acc_lim_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_lim_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_lim_theta = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_acc_lim_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_lim_theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_turning_radius = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_min_turning_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_turning_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheelbase = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_wheelbase();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheelbase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool cmd_angle_instead_rotvel = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_cmd_angle_instead_rotvel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cmd_angle_instead_rotvel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:or_local_planner.Robot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:or_local_planner.Robot)
  return false;
#undef DO_
}

void Robot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:or_local_planner.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float max_vel_x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->max_vel_x(), output);
  }

  // optional float max_vel_x_backwards = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_vel_x_backwards(), output);
  }

  // optional float max_vel_y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->max_vel_y(), output);
  }

  // optional float max_vel_theta = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_vel_theta(), output);
  }

  // optional float acc_lim_x = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->acc_lim_x(), output);
  }

  // optional float acc_lim_y = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->acc_lim_y(), output);
  }

  // optional float acc_lim_theta = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->acc_lim_theta(), output);
  }

  // optional float min_turning_radius = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->min_turning_radius(), output);
  }

  // optional float wheelbase = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->wheelbase(), output);
  }

  // optional bool cmd_angle_instead_rotvel = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->cmd_angle_instead_rotvel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:or_local_planner.Robot)
}

::google::protobuf::uint8* Robot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:or_local_planner.Robot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float max_vel_x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->max_vel_x(), target);
  }

  // optional float max_vel_x_backwards = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_vel_x_backwards(), target);
  }

  // optional float max_vel_y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->max_vel_y(), target);
  }

  // optional float max_vel_theta = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_vel_theta(), target);
  }

  // optional float acc_lim_x = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->acc_lim_x(), target);
  }

  // optional float acc_lim_y = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->acc_lim_y(), target);
  }

  // optional float acc_lim_theta = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->acc_lim_theta(), target);
  }

  // optional float min_turning_radius = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->min_turning_radius(), target);
  }

  // optional float wheelbase = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->wheelbase(), target);
  }

  // optional bool cmd_angle_instead_rotvel = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->cmd_angle_instead_rotvel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:or_local_planner.Robot)
  return target;
}

size_t Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:or_local_planner.Robot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float max_vel_x = 1;
    if (has_max_vel_x()) {
      total_size += 1 + 4;
    }

    // optional float max_vel_x_backwards = 2;
    if (has_max_vel_x_backwards()) {
      total_size += 1 + 4;
    }

    // optional float max_vel_y = 3;
    if (has_max_vel_y()) {
      total_size += 1 + 4;
    }

    // optional float max_vel_theta = 4;
    if (has_max_vel_theta()) {
      total_size += 1 + 4;
    }

    // optional float acc_lim_x = 5;
    if (has_acc_lim_x()) {
      total_size += 1 + 4;
    }

    // optional float acc_lim_y = 6;
    if (has_acc_lim_y()) {
      total_size += 1 + 4;
    }

    // optional float acc_lim_theta = 7;
    if (has_acc_lim_theta()) {
      total_size += 1 + 4;
    }

    // optional float min_turning_radius = 8;
    if (has_min_turning_radius()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional float wheelbase = 9;
    if (has_wheelbase()) {
      total_size += 1 + 4;
    }

    // optional bool cmd_angle_instead_rotvel = 10;
    if (has_cmd_angle_instead_rotvel()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Robot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:or_local_planner.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Robot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:or_local_planner.Robot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:or_local_planner.Robot)
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:or_local_planner.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      max_vel_x_ = from.max_vel_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_vel_x_backwards_ = from.max_vel_x_backwards_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_vel_y_ = from.max_vel_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_vel_theta_ = from.max_vel_theta_;
    }
    if (cached_has_bits & 0x00000010u) {
      acc_lim_x_ = from.acc_lim_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      acc_lim_y_ = from.acc_lim_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      acc_lim_theta_ = from.acc_lim_theta_;
    }
    if (cached_has_bits & 0x00000080u) {
      min_turning_radius_ = from.min_turning_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      wheelbase_ = from.wheelbase_;
    }
    if (cached_has_bits & 0x00000200u) {
      cmd_angle_instead_rotvel_ = from.cmd_angle_instead_rotvel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Robot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:or_local_planner.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:or_local_planner.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  return true;
}

void Robot::Swap(Robot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Robot::InternalSwap(Robot* other) {
  using std::swap;
  swap(max_vel_x_, other->max_vel_x_);
  swap(max_vel_x_backwards_, other->max_vel_x_backwards_);
  swap(max_vel_y_, other->max_vel_y_);
  swap(max_vel_theta_, other->max_vel_theta_);
  swap(acc_lim_x_, other->acc_lim_x_);
  swap(acc_lim_y_, other->acc_lim_y_);
  swap(acc_lim_theta_, other->acc_lim_theta_);
  swap(min_turning_radius_, other->min_turning_radius_);
  swap(wheelbase_, other->wheelbase_);
  swap(cmd_angle_instead_rotvel_, other->cmd_angle_instead_rotvel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Robot::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Robot

// optional float max_vel_x = 1;
bool Robot::has_max_vel_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Robot::set_has_max_vel_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Robot::clear_has_max_vel_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Robot::clear_max_vel_x() {
  max_vel_x_ = 0;
  clear_has_max_vel_x();
}
float Robot::max_vel_x() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Robot.max_vel_x)
  return max_vel_x_;
}
void Robot::set_max_vel_x(float value) {
  set_has_max_vel_x();
  max_vel_x_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Robot.max_vel_x)
}

// optional float max_vel_x_backwards = 2;
bool Robot::has_max_vel_x_backwards() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Robot::set_has_max_vel_x_backwards() {
  _has_bits_[0] |= 0x00000002u;
}
void Robot::clear_has_max_vel_x_backwards() {
  _has_bits_[0] &= ~0x00000002u;
}
void Robot::clear_max_vel_x_backwards() {
  max_vel_x_backwards_ = 0;
  clear_has_max_vel_x_backwards();
}
float Robot::max_vel_x_backwards() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Robot.max_vel_x_backwards)
  return max_vel_x_backwards_;
}
void Robot::set_max_vel_x_backwards(float value) {
  set_has_max_vel_x_backwards();
  max_vel_x_backwards_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Robot.max_vel_x_backwards)
}

// optional float max_vel_y = 3;
bool Robot::has_max_vel_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Robot::set_has_max_vel_y() {
  _has_bits_[0] |= 0x00000004u;
}
void Robot::clear_has_max_vel_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void Robot::clear_max_vel_y() {
  max_vel_y_ = 0;
  clear_has_max_vel_y();
}
float Robot::max_vel_y() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Robot.max_vel_y)
  return max_vel_y_;
}
void Robot::set_max_vel_y(float value) {
  set_has_max_vel_y();
  max_vel_y_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Robot.max_vel_y)
}

// optional float max_vel_theta = 4;
bool Robot::has_max_vel_theta() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Robot::set_has_max_vel_theta() {
  _has_bits_[0] |= 0x00000008u;
}
void Robot::clear_has_max_vel_theta() {
  _has_bits_[0] &= ~0x00000008u;
}
void Robot::clear_max_vel_theta() {
  max_vel_theta_ = 0;
  clear_has_max_vel_theta();
}
float Robot::max_vel_theta() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Robot.max_vel_theta)
  return max_vel_theta_;
}
void Robot::set_max_vel_theta(float value) {
  set_has_max_vel_theta();
  max_vel_theta_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Robot.max_vel_theta)
}

// optional float acc_lim_x = 5;
bool Robot::has_acc_lim_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Robot::set_has_acc_lim_x() {
  _has_bits_[0] |= 0x00000010u;
}
void Robot::clear_has_acc_lim_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void Robot::clear_acc_lim_x() {
  acc_lim_x_ = 0;
  clear_has_acc_lim_x();
}
float Robot::acc_lim_x() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Robot.acc_lim_x)
  return acc_lim_x_;
}
void Robot::set_acc_lim_x(float value) {
  set_has_acc_lim_x();
  acc_lim_x_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Robot.acc_lim_x)
}

// optional float acc_lim_y = 6;
bool Robot::has_acc_lim_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Robot::set_has_acc_lim_y() {
  _has_bits_[0] |= 0x00000020u;
}
void Robot::clear_has_acc_lim_y() {
  _has_bits_[0] &= ~0x00000020u;
}
void Robot::clear_acc_lim_y() {
  acc_lim_y_ = 0;
  clear_has_acc_lim_y();
}
float Robot::acc_lim_y() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Robot.acc_lim_y)
  return acc_lim_y_;
}
void Robot::set_acc_lim_y(float value) {
  set_has_acc_lim_y();
  acc_lim_y_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Robot.acc_lim_y)
}

// optional float acc_lim_theta = 7;
bool Robot::has_acc_lim_theta() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Robot::set_has_acc_lim_theta() {
  _has_bits_[0] |= 0x00000040u;
}
void Robot::clear_has_acc_lim_theta() {
  _has_bits_[0] &= ~0x00000040u;
}
void Robot::clear_acc_lim_theta() {
  acc_lim_theta_ = 0;
  clear_has_acc_lim_theta();
}
float Robot::acc_lim_theta() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Robot.acc_lim_theta)
  return acc_lim_theta_;
}
void Robot::set_acc_lim_theta(float value) {
  set_has_acc_lim_theta();
  acc_lim_theta_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Robot.acc_lim_theta)
}

// optional float min_turning_radius = 8;
bool Robot::has_min_turning_radius() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Robot::set_has_min_turning_radius() {
  _has_bits_[0] |= 0x00000080u;
}
void Robot::clear_has_min_turning_radius() {
  _has_bits_[0] &= ~0x00000080u;
}
void Robot::clear_min_turning_radius() {
  min_turning_radius_ = 0;
  clear_has_min_turning_radius();
}
float Robot::min_turning_radius() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Robot.min_turning_radius)
  return min_turning_radius_;
}
void Robot::set_min_turning_radius(float value) {
  set_has_min_turning_radius();
  min_turning_radius_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Robot.min_turning_radius)
}

// optional float wheelbase = 9;
bool Robot::has_wheelbase() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Robot::set_has_wheelbase() {
  _has_bits_[0] |= 0x00000100u;
}
void Robot::clear_has_wheelbase() {
  _has_bits_[0] &= ~0x00000100u;
}
void Robot::clear_wheelbase() {
  wheelbase_ = 0;
  clear_has_wheelbase();
}
float Robot::wheelbase() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Robot.wheelbase)
  return wheelbase_;
}
void Robot::set_wheelbase(float value) {
  set_has_wheelbase();
  wheelbase_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Robot.wheelbase)
}

// optional bool cmd_angle_instead_rotvel = 10;
bool Robot::has_cmd_angle_instead_rotvel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Robot::set_has_cmd_angle_instead_rotvel() {
  _has_bits_[0] |= 0x00000200u;
}
void Robot::clear_has_cmd_angle_instead_rotvel() {
  _has_bits_[0] &= ~0x00000200u;
}
void Robot::clear_cmd_angle_instead_rotvel() {
  cmd_angle_instead_rotvel_ = false;
  clear_has_cmd_angle_instead_rotvel();
}
bool Robot::cmd_angle_instead_rotvel() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Robot.cmd_angle_instead_rotvel)
  return cmd_angle_instead_rotvel_;
}
void Robot::set_cmd_angle_instead_rotvel(bool value) {
  set_has_cmd_angle_instead_rotvel();
  cmd_angle_instead_rotvel_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Robot.cmd_angle_instead_rotvel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GoalTolerance::kXyGoalToleranceFieldNumber;
const int GoalTolerance::kYawGoalToleranceFieldNumber;
const int GoalTolerance::kFreeGoalVelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GoalTolerance::GoalTolerance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:or_local_planner.GoalTolerance)
}
GoalTolerance::GoalTolerance(const GoalTolerance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xy_goal_tolerance_, &from.xy_goal_tolerance_,
    static_cast<size_t>(reinterpret_cast<char*>(&free_goal_vel_) -
    reinterpret_cast<char*>(&xy_goal_tolerance_)) + sizeof(free_goal_vel_));
  // @@protoc_insertion_point(copy_constructor:or_local_planner.GoalTolerance)
}

void GoalTolerance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&xy_goal_tolerance_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&free_goal_vel_) -
      reinterpret_cast<char*>(&xy_goal_tolerance_)) + sizeof(free_goal_vel_));
}

GoalTolerance::~GoalTolerance() {
  // @@protoc_insertion_point(destructor:or_local_planner.GoalTolerance)
  SharedDtor();
}

void GoalTolerance::SharedDtor() {
}

void GoalTolerance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoalTolerance::descriptor() {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GoalTolerance& GoalTolerance::default_instance() {
  protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  return *internal_default_instance();
}

GoalTolerance* GoalTolerance::New(::google::protobuf::Arena* arena) const {
  GoalTolerance* n = new GoalTolerance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GoalTolerance::Clear() {
// @@protoc_insertion_point(message_clear_start:or_local_planner.GoalTolerance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&xy_goal_tolerance_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&free_goal_vel_) -
        reinterpret_cast<char*>(&xy_goal_tolerance_)) + sizeof(free_goal_vel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GoalTolerance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:or_local_planner.GoalTolerance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float xy_goal_tolerance = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_xy_goal_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xy_goal_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float yaw_goal_tolerance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_yaw_goal_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_goal_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool free_goal_vel = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_free_goal_vel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &free_goal_vel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:or_local_planner.GoalTolerance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:or_local_planner.GoalTolerance)
  return false;
#undef DO_
}

void GoalTolerance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:or_local_planner.GoalTolerance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float xy_goal_tolerance = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->xy_goal_tolerance(), output);
  }

  // optional float yaw_goal_tolerance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->yaw_goal_tolerance(), output);
  }

  // optional bool free_goal_vel = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->free_goal_vel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:or_local_planner.GoalTolerance)
}

::google::protobuf::uint8* GoalTolerance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:or_local_planner.GoalTolerance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float xy_goal_tolerance = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->xy_goal_tolerance(), target);
  }

  // optional float yaw_goal_tolerance = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->yaw_goal_tolerance(), target);
  }

  // optional bool free_goal_vel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->free_goal_vel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:or_local_planner.GoalTolerance)
  return target;
}

size_t GoalTolerance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:or_local_planner.GoalTolerance)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional float xy_goal_tolerance = 1;
    if (has_xy_goal_tolerance()) {
      total_size += 1 + 4;
    }

    // optional float yaw_goal_tolerance = 2;
    if (has_yaw_goal_tolerance()) {
      total_size += 1 + 4;
    }

    // optional bool free_goal_vel = 3;
    if (has_free_goal_vel()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoalTolerance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:or_local_planner.GoalTolerance)
  GOOGLE_DCHECK_NE(&from, this);
  const GoalTolerance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GoalTolerance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:or_local_planner.GoalTolerance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:or_local_planner.GoalTolerance)
    MergeFrom(*source);
  }
}

void GoalTolerance::MergeFrom(const GoalTolerance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:or_local_planner.GoalTolerance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      xy_goal_tolerance_ = from.xy_goal_tolerance_;
    }
    if (cached_has_bits & 0x00000002u) {
      yaw_goal_tolerance_ = from.yaw_goal_tolerance_;
    }
    if (cached_has_bits & 0x00000004u) {
      free_goal_vel_ = from.free_goal_vel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GoalTolerance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:or_local_planner.GoalTolerance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoalTolerance::CopyFrom(const GoalTolerance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:or_local_planner.GoalTolerance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoalTolerance::IsInitialized() const {
  return true;
}

void GoalTolerance::Swap(GoalTolerance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GoalTolerance::InternalSwap(GoalTolerance* other) {
  using std::swap;
  swap(xy_goal_tolerance_, other->xy_goal_tolerance_);
  swap(yaw_goal_tolerance_, other->yaw_goal_tolerance_);
  swap(free_goal_vel_, other->free_goal_vel_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GoalTolerance::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GoalTolerance

// optional float xy_goal_tolerance = 1;
bool GoalTolerance::has_xy_goal_tolerance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GoalTolerance::set_has_xy_goal_tolerance() {
  _has_bits_[0] |= 0x00000001u;
}
void GoalTolerance::clear_has_xy_goal_tolerance() {
  _has_bits_[0] &= ~0x00000001u;
}
void GoalTolerance::clear_xy_goal_tolerance() {
  xy_goal_tolerance_ = 0;
  clear_has_xy_goal_tolerance();
}
float GoalTolerance::xy_goal_tolerance() const {
  // @@protoc_insertion_point(field_get:or_local_planner.GoalTolerance.xy_goal_tolerance)
  return xy_goal_tolerance_;
}
void GoalTolerance::set_xy_goal_tolerance(float value) {
  set_has_xy_goal_tolerance();
  xy_goal_tolerance_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.GoalTolerance.xy_goal_tolerance)
}

// optional float yaw_goal_tolerance = 2;
bool GoalTolerance::has_yaw_goal_tolerance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GoalTolerance::set_has_yaw_goal_tolerance() {
  _has_bits_[0] |= 0x00000002u;
}
void GoalTolerance::clear_has_yaw_goal_tolerance() {
  _has_bits_[0] &= ~0x00000002u;
}
void GoalTolerance::clear_yaw_goal_tolerance() {
  yaw_goal_tolerance_ = 0;
  clear_has_yaw_goal_tolerance();
}
float GoalTolerance::yaw_goal_tolerance() const {
  // @@protoc_insertion_point(field_get:or_local_planner.GoalTolerance.yaw_goal_tolerance)
  return yaw_goal_tolerance_;
}
void GoalTolerance::set_yaw_goal_tolerance(float value) {
  set_has_yaw_goal_tolerance();
  yaw_goal_tolerance_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.GoalTolerance.yaw_goal_tolerance)
}

// optional bool free_goal_vel = 3;
bool GoalTolerance::has_free_goal_vel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GoalTolerance::set_has_free_goal_vel() {
  _has_bits_[0] |= 0x00000004u;
}
void GoalTolerance::clear_has_free_goal_vel() {
  _has_bits_[0] &= ~0x00000004u;
}
void GoalTolerance::clear_free_goal_vel() {
  free_goal_vel_ = false;
  clear_has_free_goal_vel();
}
bool GoalTolerance::free_goal_vel() const {
  // @@protoc_insertion_point(field_get:or_local_planner.GoalTolerance.free_goal_vel)
  return free_goal_vel_;
}
void GoalTolerance::set_free_goal_vel(bool value) {
  set_has_free_goal_vel();
  free_goal_vel_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.GoalTolerance.free_goal_vel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Obstacles::kMinObstacleDistFieldNumber;
const int Obstacles::kCostmapObstaclesBehindRobotDistFieldNumber;
const int Obstacles::kObstacleAssociationCutoffFactorFieldNumber;
const int Obstacles::kObstacleAssociationForceInclusionFactorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Obstacles::Obstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:or_local_planner.Obstacles)
}
Obstacles::Obstacles(const Obstacles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_obstacle_dist_, &from.min_obstacle_dist_,
    static_cast<size_t>(reinterpret_cast<char*>(&obstacle_association_force_inclusion_factor_) -
    reinterpret_cast<char*>(&min_obstacle_dist_)) + sizeof(obstacle_association_force_inclusion_factor_));
  // @@protoc_insertion_point(copy_constructor:or_local_planner.Obstacles)
}

void Obstacles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&min_obstacle_dist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obstacle_association_force_inclusion_factor_) -
      reinterpret_cast<char*>(&min_obstacle_dist_)) + sizeof(obstacle_association_force_inclusion_factor_));
}

Obstacles::~Obstacles() {
  // @@protoc_insertion_point(destructor:or_local_planner.Obstacles)
  SharedDtor();
}

void Obstacles::SharedDtor() {
}

void Obstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Obstacles::descriptor() {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Obstacles& Obstacles::default_instance() {
  protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  return *internal_default_instance();
}

Obstacles* Obstacles::New(::google::protobuf::Arena* arena) const {
  Obstacles* n = new Obstacles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Obstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:or_local_planner.Obstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&min_obstacle_dist_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&obstacle_association_force_inclusion_factor_) -
        reinterpret_cast<char*>(&min_obstacle_dist_)) + sizeof(obstacle_association_force_inclusion_factor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Obstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:or_local_planner.Obstacles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_obstacle_dist = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_min_obstacle_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_obstacle_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float costmap_obstacles_behind_robot_dist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_costmap_obstacles_behind_robot_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &costmap_obstacles_behind_robot_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obstacle_association_cutoff_factor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_obstacle_association_cutoff_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obstacle_association_cutoff_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obstacle_association_force_inclusion_factor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_obstacle_association_force_inclusion_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obstacle_association_force_inclusion_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:or_local_planner.Obstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:or_local_planner.Obstacles)
  return false;
#undef DO_
}

void Obstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:or_local_planner.Obstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_obstacle_dist = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_obstacle_dist(), output);
  }

  // optional float costmap_obstacles_behind_robot_dist = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->costmap_obstacles_behind_robot_dist(), output);
  }

  // optional float obstacle_association_cutoff_factor = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->obstacle_association_cutoff_factor(), output);
  }

  // optional float obstacle_association_force_inclusion_factor = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->obstacle_association_force_inclusion_factor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:or_local_planner.Obstacles)
}

::google::protobuf::uint8* Obstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:or_local_planner.Obstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_obstacle_dist = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_obstacle_dist(), target);
  }

  // optional float costmap_obstacles_behind_robot_dist = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->costmap_obstacles_behind_robot_dist(), target);
  }

  // optional float obstacle_association_cutoff_factor = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->obstacle_association_cutoff_factor(), target);
  }

  // optional float obstacle_association_force_inclusion_factor = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->obstacle_association_force_inclusion_factor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:or_local_planner.Obstacles)
  return target;
}

size_t Obstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:or_local_planner.Obstacles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional float min_obstacle_dist = 1;
    if (has_min_obstacle_dist()) {
      total_size += 1 + 4;
    }

    // optional float costmap_obstacles_behind_robot_dist = 2;
    if (has_costmap_obstacles_behind_robot_dist()) {
      total_size += 1 + 4;
    }

    // optional float obstacle_association_cutoff_factor = 3;
    if (has_obstacle_association_cutoff_factor()) {
      total_size += 1 + 4;
    }

    // optional float obstacle_association_force_inclusion_factor = 4;
    if (has_obstacle_association_force_inclusion_factor()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Obstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:or_local_planner.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Obstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:or_local_planner.Obstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:or_local_planner.Obstacles)
    MergeFrom(*source);
  }
}

void Obstacles::MergeFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:or_local_planner.Obstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      min_obstacle_dist_ = from.min_obstacle_dist_;
    }
    if (cached_has_bits & 0x00000002u) {
      costmap_obstacles_behind_robot_dist_ = from.costmap_obstacles_behind_robot_dist_;
    }
    if (cached_has_bits & 0x00000004u) {
      obstacle_association_cutoff_factor_ = from.obstacle_association_cutoff_factor_;
    }
    if (cached_has_bits & 0x00000008u) {
      obstacle_association_force_inclusion_factor_ = from.obstacle_association_force_inclusion_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Obstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:or_local_planner.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacles::CopyFrom(const Obstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:or_local_planner.Obstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacles::IsInitialized() const {
  return true;
}

void Obstacles::Swap(Obstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Obstacles::InternalSwap(Obstacles* other) {
  using std::swap;
  swap(min_obstacle_dist_, other->min_obstacle_dist_);
  swap(costmap_obstacles_behind_robot_dist_, other->costmap_obstacles_behind_robot_dist_);
  swap(obstacle_association_cutoff_factor_, other->obstacle_association_cutoff_factor_);
  swap(obstacle_association_force_inclusion_factor_, other->obstacle_association_force_inclusion_factor_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Obstacles::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Obstacles

// optional float min_obstacle_dist = 1;
bool Obstacles::has_min_obstacle_dist() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Obstacles::set_has_min_obstacle_dist() {
  _has_bits_[0] |= 0x00000001u;
}
void Obstacles::clear_has_min_obstacle_dist() {
  _has_bits_[0] &= ~0x00000001u;
}
void Obstacles::clear_min_obstacle_dist() {
  min_obstacle_dist_ = 0;
  clear_has_min_obstacle_dist();
}
float Obstacles::min_obstacle_dist() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Obstacles.min_obstacle_dist)
  return min_obstacle_dist_;
}
void Obstacles::set_min_obstacle_dist(float value) {
  set_has_min_obstacle_dist();
  min_obstacle_dist_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Obstacles.min_obstacle_dist)
}

// optional float costmap_obstacles_behind_robot_dist = 2;
bool Obstacles::has_costmap_obstacles_behind_robot_dist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Obstacles::set_has_costmap_obstacles_behind_robot_dist() {
  _has_bits_[0] |= 0x00000002u;
}
void Obstacles::clear_has_costmap_obstacles_behind_robot_dist() {
  _has_bits_[0] &= ~0x00000002u;
}
void Obstacles::clear_costmap_obstacles_behind_robot_dist() {
  costmap_obstacles_behind_robot_dist_ = 0;
  clear_has_costmap_obstacles_behind_robot_dist();
}
float Obstacles::costmap_obstacles_behind_robot_dist() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Obstacles.costmap_obstacles_behind_robot_dist)
  return costmap_obstacles_behind_robot_dist_;
}
void Obstacles::set_costmap_obstacles_behind_robot_dist(float value) {
  set_has_costmap_obstacles_behind_robot_dist();
  costmap_obstacles_behind_robot_dist_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Obstacles.costmap_obstacles_behind_robot_dist)
}

// optional float obstacle_association_cutoff_factor = 3;
bool Obstacles::has_obstacle_association_cutoff_factor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Obstacles::set_has_obstacle_association_cutoff_factor() {
  _has_bits_[0] |= 0x00000004u;
}
void Obstacles::clear_has_obstacle_association_cutoff_factor() {
  _has_bits_[0] &= ~0x00000004u;
}
void Obstacles::clear_obstacle_association_cutoff_factor() {
  obstacle_association_cutoff_factor_ = 0;
  clear_has_obstacle_association_cutoff_factor();
}
float Obstacles::obstacle_association_cutoff_factor() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Obstacles.obstacle_association_cutoff_factor)
  return obstacle_association_cutoff_factor_;
}
void Obstacles::set_obstacle_association_cutoff_factor(float value) {
  set_has_obstacle_association_cutoff_factor();
  obstacle_association_cutoff_factor_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Obstacles.obstacle_association_cutoff_factor)
}

// optional float obstacle_association_force_inclusion_factor = 4;
bool Obstacles::has_obstacle_association_force_inclusion_factor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Obstacles::set_has_obstacle_association_force_inclusion_factor() {
  _has_bits_[0] |= 0x00000008u;
}
void Obstacles::clear_has_obstacle_association_force_inclusion_factor() {
  _has_bits_[0] &= ~0x00000008u;
}
void Obstacles::clear_obstacle_association_force_inclusion_factor() {
  obstacle_association_force_inclusion_factor_ = 0;
  clear_has_obstacle_association_force_inclusion_factor();
}
float Obstacles::obstacle_association_force_inclusion_factor() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Obstacles.obstacle_association_force_inclusion_factor)
  return obstacle_association_force_inclusion_factor_;
}
void Obstacles::set_obstacle_association_force_inclusion_factor(float value) {
  set_has_obstacle_association_force_inclusion_factor();
  obstacle_association_force_inclusion_factor_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Obstacles.obstacle_association_force_inclusion_factor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Optimization::kNoInnerIterationsFieldNumber;
const int Optimization::kNoOuterIterationsFieldNumber;
const int Optimization::kOptimizationActivateFieldNumber;
const int Optimization::kOptimizationVerboseFieldNumber;
const int Optimization::kPenaltyEpsilonFieldNumber;
const int Optimization::kWeightMaxVelXFieldNumber;
const int Optimization::kWeightMaxVelYFieldNumber;
const int Optimization::kWeightMaxVelThetaFieldNumber;
const int Optimization::kWeightAccLimXFieldNumber;
const int Optimization::kWeightAccLimYFieldNumber;
const int Optimization::kWeightAccLimThetFieldNumber;
const int Optimization::kWeightKinematicsNhFieldNumber;
const int Optimization::kWeightKinematicsForwardDriveFieldNumber;
const int Optimization::kWeightKinematicsTurningRadiusFieldNumber;
const int Optimization::kWeightOptimaltimeFieldNumber;
const int Optimization::kWeightObstacleFieldNumber;
const int Optimization::kWeightInflationFieldNumber;
const int Optimization::kWeightDynamicObstacleFieldNumber;
const int Optimization::kWeightViapointFieldNumber;
const int Optimization::kWeightAdaptFactorFieldNumber;
const int Optimization::kWeightPreferRotdirFieldNumber;
const int Optimization::kWeightAccLimThetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Optimization::Optimization()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:or_local_planner.Optimization)
}
Optimization::Optimization(const Optimization& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&no_inner_iterations_, &from.no_inner_iterations_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_acc_lim_theta_) -
    reinterpret_cast<char*>(&no_inner_iterations_)) + sizeof(weight_acc_lim_theta_));
  // @@protoc_insertion_point(copy_constructor:or_local_planner.Optimization)
}

void Optimization::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&no_inner_iterations_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_acc_lim_theta_) -
      reinterpret_cast<char*>(&no_inner_iterations_)) + sizeof(weight_acc_lim_theta_));
}

Optimization::~Optimization() {
  // @@protoc_insertion_point(destructor:or_local_planner.Optimization)
  SharedDtor();
}

void Optimization::SharedDtor() {
}

void Optimization::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Optimization::descriptor() {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Optimization& Optimization::default_instance() {
  protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  return *internal_default_instance();
}

Optimization* Optimization::New(::google::protobuf::Arena* arena) const {
  Optimization* n = new Optimization;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Optimization::Clear() {
// @@protoc_insertion_point(message_clear_start:or_local_planner.Optimization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&no_inner_iterations_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_max_vel_theta_) -
        reinterpret_cast<char*>(&no_inner_iterations_)) + sizeof(weight_max_vel_theta_));
  }
  if (cached_has_bits & 65280u) {
    ::memset(&weight_acc_lim_x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_obstacle_) -
        reinterpret_cast<char*>(&weight_acc_lim_x_)) + sizeof(weight_obstacle_));
  }
  if (cached_has_bits & 4128768u) {
    ::memset(&weight_inflation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weight_acc_lim_theta_) -
        reinterpret_cast<char*>(&weight_inflation_)) + sizeof(weight_acc_lim_theta_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Optimization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:or_local_planner.Optimization)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 no_inner_iterations = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_no_inner_iterations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &no_inner_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 no_outer_iterations = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_no_outer_iterations();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &no_outer_iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool optimization_activate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_optimization_activate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optimization_activate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool optimization_verbose = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_optimization_verbose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optimization_verbose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float penalty_epsilon = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_penalty_epsilon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &penalty_epsilon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_max_vel_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_weight_max_vel_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_max_vel_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_max_vel_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_weight_max_vel_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_max_vel_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_max_vel_theta = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_weight_max_vel_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_max_vel_theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_acc_lim_x = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_weight_acc_lim_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_acc_lim_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_acc_lim_y = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u /* 85 & 0xFF */)) {
          set_has_weight_acc_lim_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_acc_lim_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_acc_lim_thet = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u /* 93 & 0xFF */)) {
          set_has_weight_acc_lim_thet();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_acc_lim_thet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_kinematics_nh = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u /* 101 & 0xFF */)) {
          set_has_weight_kinematics_nh();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_kinematics_nh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_kinematics_forward_drive = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u /* 109 & 0xFF */)) {
          set_has_weight_kinematics_forward_drive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_kinematics_forward_drive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_kinematics_turning_radius = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u /* 117 & 0xFF */)) {
          set_has_weight_kinematics_turning_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_kinematics_turning_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_optimaltime = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u /* 125 & 0xFF */)) {
          set_has_weight_optimaltime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_optimaltime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_obstacle = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u /* 133 & 0xFF */)) {
          set_has_weight_obstacle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_obstacle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_inflation = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u /* 141 & 0xFF */)) {
          set_has_weight_inflation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_inflation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_dynamic_obstacle = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u /* 149 & 0xFF */)) {
          set_has_weight_dynamic_obstacle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_dynamic_obstacle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_viapoint = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u /* 157 & 0xFF */)) {
          set_has_weight_viapoint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_viapoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_adapt_factor = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u /* 165 & 0xFF */)) {
          set_has_weight_adapt_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_adapt_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_prefer_rotdir = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u /* 173 & 0xFF */)) {
          set_has_weight_prefer_rotdir();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_prefer_rotdir_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_acc_lim_theta = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u /* 181 & 0xFF */)) {
          set_has_weight_acc_lim_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_acc_lim_theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:or_local_planner.Optimization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:or_local_planner.Optimization)
  return false;
#undef DO_
}

void Optimization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:or_local_planner.Optimization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 no_inner_iterations = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->no_inner_iterations(), output);
  }

  // optional int32 no_outer_iterations = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->no_outer_iterations(), output);
  }

  // optional bool optimization_activate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->optimization_activate(), output);
  }

  // optional bool optimization_verbose = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->optimization_verbose(), output);
  }

  // optional float penalty_epsilon = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->penalty_epsilon(), output);
  }

  // optional float weight_max_vel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->weight_max_vel_x(), output);
  }

  // optional float weight_max_vel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->weight_max_vel_y(), output);
  }

  // optional float weight_max_vel_theta = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->weight_max_vel_theta(), output);
  }

  // optional float weight_acc_lim_x = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->weight_acc_lim_x(), output);
  }

  // optional float weight_acc_lim_y = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->weight_acc_lim_y(), output);
  }

  // optional float weight_acc_lim_thet = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->weight_acc_lim_thet(), output);
  }

  // optional float weight_kinematics_nh = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->weight_kinematics_nh(), output);
  }

  // optional float weight_kinematics_forward_drive = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->weight_kinematics_forward_drive(), output);
  }

  // optional float weight_kinematics_turning_radius = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->weight_kinematics_turning_radius(), output);
  }

  // optional float weight_optimaltime = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->weight_optimaltime(), output);
  }

  // optional float weight_obstacle = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->weight_obstacle(), output);
  }

  // optional float weight_inflation = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->weight_inflation(), output);
  }

  // optional float weight_dynamic_obstacle = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->weight_dynamic_obstacle(), output);
  }

  // optional float weight_viapoint = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->weight_viapoint(), output);
  }

  // optional float weight_adapt_factor = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->weight_adapt_factor(), output);
  }

  // optional float weight_prefer_rotdir = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->weight_prefer_rotdir(), output);
  }

  // optional float weight_acc_lim_theta = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->weight_acc_lim_theta(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:or_local_planner.Optimization)
}

::google::protobuf::uint8* Optimization::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:or_local_planner.Optimization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 no_inner_iterations = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->no_inner_iterations(), target);
  }

  // optional int32 no_outer_iterations = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->no_outer_iterations(), target);
  }

  // optional bool optimization_activate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->optimization_activate(), target);
  }

  // optional bool optimization_verbose = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->optimization_verbose(), target);
  }

  // optional float penalty_epsilon = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->penalty_epsilon(), target);
  }

  // optional float weight_max_vel_x = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->weight_max_vel_x(), target);
  }

  // optional float weight_max_vel_y = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->weight_max_vel_y(), target);
  }

  // optional float weight_max_vel_theta = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->weight_max_vel_theta(), target);
  }

  // optional float weight_acc_lim_x = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->weight_acc_lim_x(), target);
  }

  // optional float weight_acc_lim_y = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->weight_acc_lim_y(), target);
  }

  // optional float weight_acc_lim_thet = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->weight_acc_lim_thet(), target);
  }

  // optional float weight_kinematics_nh = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->weight_kinematics_nh(), target);
  }

  // optional float weight_kinematics_forward_drive = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->weight_kinematics_forward_drive(), target);
  }

  // optional float weight_kinematics_turning_radius = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->weight_kinematics_turning_radius(), target);
  }

  // optional float weight_optimaltime = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->weight_optimaltime(), target);
  }

  // optional float weight_obstacle = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->weight_obstacle(), target);
  }

  // optional float weight_inflation = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->weight_inflation(), target);
  }

  // optional float weight_dynamic_obstacle = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->weight_dynamic_obstacle(), target);
  }

  // optional float weight_viapoint = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->weight_viapoint(), target);
  }

  // optional float weight_adapt_factor = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->weight_adapt_factor(), target);
  }

  // optional float weight_prefer_rotdir = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->weight_prefer_rotdir(), target);
  }

  // optional float weight_acc_lim_theta = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->weight_acc_lim_theta(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:or_local_planner.Optimization)
  return target;
}

size_t Optimization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:or_local_planner.Optimization)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 no_inner_iterations = 1;
    if (has_no_inner_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->no_inner_iterations());
    }

    // optional int32 no_outer_iterations = 2;
    if (has_no_outer_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->no_outer_iterations());
    }

    // optional bool optimization_activate = 3;
    if (has_optimization_activate()) {
      total_size += 1 + 1;
    }

    // optional bool optimization_verbose = 4;
    if (has_optimization_verbose()) {
      total_size += 1 + 1;
    }

    // optional float penalty_epsilon = 5;
    if (has_penalty_epsilon()) {
      total_size += 1 + 4;
    }

    // optional float weight_max_vel_x = 6;
    if (has_weight_max_vel_x()) {
      total_size += 1 + 4;
    }

    // optional float weight_max_vel_y = 7;
    if (has_weight_max_vel_y()) {
      total_size += 1 + 4;
    }

    // optional float weight_max_vel_theta = 8;
    if (has_weight_max_vel_theta()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float weight_acc_lim_x = 9;
    if (has_weight_acc_lim_x()) {
      total_size += 1 + 4;
    }

    // optional float weight_acc_lim_y = 10;
    if (has_weight_acc_lim_y()) {
      total_size += 1 + 4;
    }

    // optional float weight_acc_lim_thet = 11;
    if (has_weight_acc_lim_thet()) {
      total_size += 1 + 4;
    }

    // optional float weight_kinematics_nh = 12;
    if (has_weight_kinematics_nh()) {
      total_size += 1 + 4;
    }

    // optional float weight_kinematics_forward_drive = 13;
    if (has_weight_kinematics_forward_drive()) {
      total_size += 1 + 4;
    }

    // optional float weight_kinematics_turning_radius = 14;
    if (has_weight_kinematics_turning_radius()) {
      total_size += 1 + 4;
    }

    // optional float weight_optimaltime = 15;
    if (has_weight_optimaltime()) {
      total_size += 1 + 4;
    }

    // optional float weight_obstacle = 16;
    if (has_weight_obstacle()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional float weight_inflation = 17;
    if (has_weight_inflation()) {
      total_size += 2 + 4;
    }

    // optional float weight_dynamic_obstacle = 18;
    if (has_weight_dynamic_obstacle()) {
      total_size += 2 + 4;
    }

    // optional float weight_viapoint = 19;
    if (has_weight_viapoint()) {
      total_size += 2 + 4;
    }

    // optional float weight_adapt_factor = 20;
    if (has_weight_adapt_factor()) {
      total_size += 2 + 4;
    }

    // optional float weight_prefer_rotdir = 21;
    if (has_weight_prefer_rotdir()) {
      total_size += 2 + 4;
    }

    // optional float weight_acc_lim_theta = 22;
    if (has_weight_acc_lim_theta()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Optimization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:or_local_planner.Optimization)
  GOOGLE_DCHECK_NE(&from, this);
  const Optimization* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Optimization>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:or_local_planner.Optimization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:or_local_planner.Optimization)
    MergeFrom(*source);
  }
}

void Optimization::MergeFrom(const Optimization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:or_local_planner.Optimization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      no_inner_iterations_ = from.no_inner_iterations_;
    }
    if (cached_has_bits & 0x00000002u) {
      no_outer_iterations_ = from.no_outer_iterations_;
    }
    if (cached_has_bits & 0x00000004u) {
      optimization_activate_ = from.optimization_activate_;
    }
    if (cached_has_bits & 0x00000008u) {
      optimization_verbose_ = from.optimization_verbose_;
    }
    if (cached_has_bits & 0x00000010u) {
      penalty_epsilon_ = from.penalty_epsilon_;
    }
    if (cached_has_bits & 0x00000020u) {
      weight_max_vel_x_ = from.weight_max_vel_x_;
    }
    if (cached_has_bits & 0x00000040u) {
      weight_max_vel_y_ = from.weight_max_vel_y_;
    }
    if (cached_has_bits & 0x00000080u) {
      weight_max_vel_theta_ = from.weight_max_vel_theta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      weight_acc_lim_x_ = from.weight_acc_lim_x_;
    }
    if (cached_has_bits & 0x00000200u) {
      weight_acc_lim_y_ = from.weight_acc_lim_y_;
    }
    if (cached_has_bits & 0x00000400u) {
      weight_acc_lim_thet_ = from.weight_acc_lim_thet_;
    }
    if (cached_has_bits & 0x00000800u) {
      weight_kinematics_nh_ = from.weight_kinematics_nh_;
    }
    if (cached_has_bits & 0x00001000u) {
      weight_kinematics_forward_drive_ = from.weight_kinematics_forward_drive_;
    }
    if (cached_has_bits & 0x00002000u) {
      weight_kinematics_turning_radius_ = from.weight_kinematics_turning_radius_;
    }
    if (cached_has_bits & 0x00004000u) {
      weight_optimaltime_ = from.weight_optimaltime_;
    }
    if (cached_has_bits & 0x00008000u) {
      weight_obstacle_ = from.weight_obstacle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      weight_inflation_ = from.weight_inflation_;
    }
    if (cached_has_bits & 0x00020000u) {
      weight_dynamic_obstacle_ = from.weight_dynamic_obstacle_;
    }
    if (cached_has_bits & 0x00040000u) {
      weight_viapoint_ = from.weight_viapoint_;
    }
    if (cached_has_bits & 0x00080000u) {
      weight_adapt_factor_ = from.weight_adapt_factor_;
    }
    if (cached_has_bits & 0x00100000u) {
      weight_prefer_rotdir_ = from.weight_prefer_rotdir_;
    }
    if (cached_has_bits & 0x00200000u) {
      weight_acc_lim_theta_ = from.weight_acc_lim_theta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Optimization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:or_local_planner.Optimization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optimization::CopyFrom(const Optimization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:or_local_planner.Optimization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optimization::IsInitialized() const {
  return true;
}

void Optimization::Swap(Optimization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Optimization::InternalSwap(Optimization* other) {
  using std::swap;
  swap(no_inner_iterations_, other->no_inner_iterations_);
  swap(no_outer_iterations_, other->no_outer_iterations_);
  swap(optimization_activate_, other->optimization_activate_);
  swap(optimization_verbose_, other->optimization_verbose_);
  swap(penalty_epsilon_, other->penalty_epsilon_);
  swap(weight_max_vel_x_, other->weight_max_vel_x_);
  swap(weight_max_vel_y_, other->weight_max_vel_y_);
  swap(weight_max_vel_theta_, other->weight_max_vel_theta_);
  swap(weight_acc_lim_x_, other->weight_acc_lim_x_);
  swap(weight_acc_lim_y_, other->weight_acc_lim_y_);
  swap(weight_acc_lim_thet_, other->weight_acc_lim_thet_);
  swap(weight_kinematics_nh_, other->weight_kinematics_nh_);
  swap(weight_kinematics_forward_drive_, other->weight_kinematics_forward_drive_);
  swap(weight_kinematics_turning_radius_, other->weight_kinematics_turning_radius_);
  swap(weight_optimaltime_, other->weight_optimaltime_);
  swap(weight_obstacle_, other->weight_obstacle_);
  swap(weight_inflation_, other->weight_inflation_);
  swap(weight_dynamic_obstacle_, other->weight_dynamic_obstacle_);
  swap(weight_viapoint_, other->weight_viapoint_);
  swap(weight_adapt_factor_, other->weight_adapt_factor_);
  swap(weight_prefer_rotdir_, other->weight_prefer_rotdir_);
  swap(weight_acc_lim_theta_, other->weight_acc_lim_theta_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Optimization::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Optimization

// optional int32 no_inner_iterations = 1;
bool Optimization::has_no_inner_iterations() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Optimization::set_has_no_inner_iterations() {
  _has_bits_[0] |= 0x00000001u;
}
void Optimization::clear_has_no_inner_iterations() {
  _has_bits_[0] &= ~0x00000001u;
}
void Optimization::clear_no_inner_iterations() {
  no_inner_iterations_ = 0;
  clear_has_no_inner_iterations();
}
::google::protobuf::int32 Optimization::no_inner_iterations() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.no_inner_iterations)
  return no_inner_iterations_;
}
void Optimization::set_no_inner_iterations(::google::protobuf::int32 value) {
  set_has_no_inner_iterations();
  no_inner_iterations_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.no_inner_iterations)
}

// optional int32 no_outer_iterations = 2;
bool Optimization::has_no_outer_iterations() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Optimization::set_has_no_outer_iterations() {
  _has_bits_[0] |= 0x00000002u;
}
void Optimization::clear_has_no_outer_iterations() {
  _has_bits_[0] &= ~0x00000002u;
}
void Optimization::clear_no_outer_iterations() {
  no_outer_iterations_ = 0;
  clear_has_no_outer_iterations();
}
::google::protobuf::int32 Optimization::no_outer_iterations() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.no_outer_iterations)
  return no_outer_iterations_;
}
void Optimization::set_no_outer_iterations(::google::protobuf::int32 value) {
  set_has_no_outer_iterations();
  no_outer_iterations_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.no_outer_iterations)
}

// optional bool optimization_activate = 3;
bool Optimization::has_optimization_activate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Optimization::set_has_optimization_activate() {
  _has_bits_[0] |= 0x00000004u;
}
void Optimization::clear_has_optimization_activate() {
  _has_bits_[0] &= ~0x00000004u;
}
void Optimization::clear_optimization_activate() {
  optimization_activate_ = false;
  clear_has_optimization_activate();
}
bool Optimization::optimization_activate() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.optimization_activate)
  return optimization_activate_;
}
void Optimization::set_optimization_activate(bool value) {
  set_has_optimization_activate();
  optimization_activate_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.optimization_activate)
}

// optional bool optimization_verbose = 4;
bool Optimization::has_optimization_verbose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Optimization::set_has_optimization_verbose() {
  _has_bits_[0] |= 0x00000008u;
}
void Optimization::clear_has_optimization_verbose() {
  _has_bits_[0] &= ~0x00000008u;
}
void Optimization::clear_optimization_verbose() {
  optimization_verbose_ = false;
  clear_has_optimization_verbose();
}
bool Optimization::optimization_verbose() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.optimization_verbose)
  return optimization_verbose_;
}
void Optimization::set_optimization_verbose(bool value) {
  set_has_optimization_verbose();
  optimization_verbose_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.optimization_verbose)
}

// optional float penalty_epsilon = 5;
bool Optimization::has_penalty_epsilon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Optimization::set_has_penalty_epsilon() {
  _has_bits_[0] |= 0x00000010u;
}
void Optimization::clear_has_penalty_epsilon() {
  _has_bits_[0] &= ~0x00000010u;
}
void Optimization::clear_penalty_epsilon() {
  penalty_epsilon_ = 0;
  clear_has_penalty_epsilon();
}
float Optimization::penalty_epsilon() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.penalty_epsilon)
  return penalty_epsilon_;
}
void Optimization::set_penalty_epsilon(float value) {
  set_has_penalty_epsilon();
  penalty_epsilon_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.penalty_epsilon)
}

// optional float weight_max_vel_x = 6;
bool Optimization::has_weight_max_vel_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Optimization::set_has_weight_max_vel_x() {
  _has_bits_[0] |= 0x00000020u;
}
void Optimization::clear_has_weight_max_vel_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void Optimization::clear_weight_max_vel_x() {
  weight_max_vel_x_ = 0;
  clear_has_weight_max_vel_x();
}
float Optimization::weight_max_vel_x() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.weight_max_vel_x)
  return weight_max_vel_x_;
}
void Optimization::set_weight_max_vel_x(float value) {
  set_has_weight_max_vel_x();
  weight_max_vel_x_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.weight_max_vel_x)
}

// optional float weight_max_vel_y = 7;
bool Optimization::has_weight_max_vel_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Optimization::set_has_weight_max_vel_y() {
  _has_bits_[0] |= 0x00000040u;
}
void Optimization::clear_has_weight_max_vel_y() {
  _has_bits_[0] &= ~0x00000040u;
}
void Optimization::clear_weight_max_vel_y() {
  weight_max_vel_y_ = 0;
  clear_has_weight_max_vel_y();
}
float Optimization::weight_max_vel_y() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.weight_max_vel_y)
  return weight_max_vel_y_;
}
void Optimization::set_weight_max_vel_y(float value) {
  set_has_weight_max_vel_y();
  weight_max_vel_y_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.weight_max_vel_y)
}

// optional float weight_max_vel_theta = 8;
bool Optimization::has_weight_max_vel_theta() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Optimization::set_has_weight_max_vel_theta() {
  _has_bits_[0] |= 0x00000080u;
}
void Optimization::clear_has_weight_max_vel_theta() {
  _has_bits_[0] &= ~0x00000080u;
}
void Optimization::clear_weight_max_vel_theta() {
  weight_max_vel_theta_ = 0;
  clear_has_weight_max_vel_theta();
}
float Optimization::weight_max_vel_theta() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.weight_max_vel_theta)
  return weight_max_vel_theta_;
}
void Optimization::set_weight_max_vel_theta(float value) {
  set_has_weight_max_vel_theta();
  weight_max_vel_theta_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.weight_max_vel_theta)
}

// optional float weight_acc_lim_x = 9;
bool Optimization::has_weight_acc_lim_x() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Optimization::set_has_weight_acc_lim_x() {
  _has_bits_[0] |= 0x00000100u;
}
void Optimization::clear_has_weight_acc_lim_x() {
  _has_bits_[0] &= ~0x00000100u;
}
void Optimization::clear_weight_acc_lim_x() {
  weight_acc_lim_x_ = 0;
  clear_has_weight_acc_lim_x();
}
float Optimization::weight_acc_lim_x() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.weight_acc_lim_x)
  return weight_acc_lim_x_;
}
void Optimization::set_weight_acc_lim_x(float value) {
  set_has_weight_acc_lim_x();
  weight_acc_lim_x_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.weight_acc_lim_x)
}

// optional float weight_acc_lim_y = 10;
bool Optimization::has_weight_acc_lim_y() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Optimization::set_has_weight_acc_lim_y() {
  _has_bits_[0] |= 0x00000200u;
}
void Optimization::clear_has_weight_acc_lim_y() {
  _has_bits_[0] &= ~0x00000200u;
}
void Optimization::clear_weight_acc_lim_y() {
  weight_acc_lim_y_ = 0;
  clear_has_weight_acc_lim_y();
}
float Optimization::weight_acc_lim_y() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.weight_acc_lim_y)
  return weight_acc_lim_y_;
}
void Optimization::set_weight_acc_lim_y(float value) {
  set_has_weight_acc_lim_y();
  weight_acc_lim_y_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.weight_acc_lim_y)
}

// optional float weight_acc_lim_thet = 11;
bool Optimization::has_weight_acc_lim_thet() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Optimization::set_has_weight_acc_lim_thet() {
  _has_bits_[0] |= 0x00000400u;
}
void Optimization::clear_has_weight_acc_lim_thet() {
  _has_bits_[0] &= ~0x00000400u;
}
void Optimization::clear_weight_acc_lim_thet() {
  weight_acc_lim_thet_ = 0;
  clear_has_weight_acc_lim_thet();
}
float Optimization::weight_acc_lim_thet() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.weight_acc_lim_thet)
  return weight_acc_lim_thet_;
}
void Optimization::set_weight_acc_lim_thet(float value) {
  set_has_weight_acc_lim_thet();
  weight_acc_lim_thet_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.weight_acc_lim_thet)
}

// optional float weight_kinematics_nh = 12;
bool Optimization::has_weight_kinematics_nh() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Optimization::set_has_weight_kinematics_nh() {
  _has_bits_[0] |= 0x00000800u;
}
void Optimization::clear_has_weight_kinematics_nh() {
  _has_bits_[0] &= ~0x00000800u;
}
void Optimization::clear_weight_kinematics_nh() {
  weight_kinematics_nh_ = 0;
  clear_has_weight_kinematics_nh();
}
float Optimization::weight_kinematics_nh() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.weight_kinematics_nh)
  return weight_kinematics_nh_;
}
void Optimization::set_weight_kinematics_nh(float value) {
  set_has_weight_kinematics_nh();
  weight_kinematics_nh_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.weight_kinematics_nh)
}

// optional float weight_kinematics_forward_drive = 13;
bool Optimization::has_weight_kinematics_forward_drive() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Optimization::set_has_weight_kinematics_forward_drive() {
  _has_bits_[0] |= 0x00001000u;
}
void Optimization::clear_has_weight_kinematics_forward_drive() {
  _has_bits_[0] &= ~0x00001000u;
}
void Optimization::clear_weight_kinematics_forward_drive() {
  weight_kinematics_forward_drive_ = 0;
  clear_has_weight_kinematics_forward_drive();
}
float Optimization::weight_kinematics_forward_drive() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.weight_kinematics_forward_drive)
  return weight_kinematics_forward_drive_;
}
void Optimization::set_weight_kinematics_forward_drive(float value) {
  set_has_weight_kinematics_forward_drive();
  weight_kinematics_forward_drive_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.weight_kinematics_forward_drive)
}

// optional float weight_kinematics_turning_radius = 14;
bool Optimization::has_weight_kinematics_turning_radius() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Optimization::set_has_weight_kinematics_turning_radius() {
  _has_bits_[0] |= 0x00002000u;
}
void Optimization::clear_has_weight_kinematics_turning_radius() {
  _has_bits_[0] &= ~0x00002000u;
}
void Optimization::clear_weight_kinematics_turning_radius() {
  weight_kinematics_turning_radius_ = 0;
  clear_has_weight_kinematics_turning_radius();
}
float Optimization::weight_kinematics_turning_radius() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.weight_kinematics_turning_radius)
  return weight_kinematics_turning_radius_;
}
void Optimization::set_weight_kinematics_turning_radius(float value) {
  set_has_weight_kinematics_turning_radius();
  weight_kinematics_turning_radius_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.weight_kinematics_turning_radius)
}

// optional float weight_optimaltime = 15;
bool Optimization::has_weight_optimaltime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Optimization::set_has_weight_optimaltime() {
  _has_bits_[0] |= 0x00004000u;
}
void Optimization::clear_has_weight_optimaltime() {
  _has_bits_[0] &= ~0x00004000u;
}
void Optimization::clear_weight_optimaltime() {
  weight_optimaltime_ = 0;
  clear_has_weight_optimaltime();
}
float Optimization::weight_optimaltime() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.weight_optimaltime)
  return weight_optimaltime_;
}
void Optimization::set_weight_optimaltime(float value) {
  set_has_weight_optimaltime();
  weight_optimaltime_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.weight_optimaltime)
}

// optional float weight_obstacle = 16;
bool Optimization::has_weight_obstacle() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Optimization::set_has_weight_obstacle() {
  _has_bits_[0] |= 0x00008000u;
}
void Optimization::clear_has_weight_obstacle() {
  _has_bits_[0] &= ~0x00008000u;
}
void Optimization::clear_weight_obstacle() {
  weight_obstacle_ = 0;
  clear_has_weight_obstacle();
}
float Optimization::weight_obstacle() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.weight_obstacle)
  return weight_obstacle_;
}
void Optimization::set_weight_obstacle(float value) {
  set_has_weight_obstacle();
  weight_obstacle_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.weight_obstacle)
}

// optional float weight_inflation = 17;
bool Optimization::has_weight_inflation() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Optimization::set_has_weight_inflation() {
  _has_bits_[0] |= 0x00010000u;
}
void Optimization::clear_has_weight_inflation() {
  _has_bits_[0] &= ~0x00010000u;
}
void Optimization::clear_weight_inflation() {
  weight_inflation_ = 0;
  clear_has_weight_inflation();
}
float Optimization::weight_inflation() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.weight_inflation)
  return weight_inflation_;
}
void Optimization::set_weight_inflation(float value) {
  set_has_weight_inflation();
  weight_inflation_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.weight_inflation)
}

// optional float weight_dynamic_obstacle = 18;
bool Optimization::has_weight_dynamic_obstacle() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Optimization::set_has_weight_dynamic_obstacle() {
  _has_bits_[0] |= 0x00020000u;
}
void Optimization::clear_has_weight_dynamic_obstacle() {
  _has_bits_[0] &= ~0x00020000u;
}
void Optimization::clear_weight_dynamic_obstacle() {
  weight_dynamic_obstacle_ = 0;
  clear_has_weight_dynamic_obstacle();
}
float Optimization::weight_dynamic_obstacle() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.weight_dynamic_obstacle)
  return weight_dynamic_obstacle_;
}
void Optimization::set_weight_dynamic_obstacle(float value) {
  set_has_weight_dynamic_obstacle();
  weight_dynamic_obstacle_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.weight_dynamic_obstacle)
}

// optional float weight_viapoint = 19;
bool Optimization::has_weight_viapoint() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Optimization::set_has_weight_viapoint() {
  _has_bits_[0] |= 0x00040000u;
}
void Optimization::clear_has_weight_viapoint() {
  _has_bits_[0] &= ~0x00040000u;
}
void Optimization::clear_weight_viapoint() {
  weight_viapoint_ = 0;
  clear_has_weight_viapoint();
}
float Optimization::weight_viapoint() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.weight_viapoint)
  return weight_viapoint_;
}
void Optimization::set_weight_viapoint(float value) {
  set_has_weight_viapoint();
  weight_viapoint_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.weight_viapoint)
}

// optional float weight_adapt_factor = 20;
bool Optimization::has_weight_adapt_factor() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Optimization::set_has_weight_adapt_factor() {
  _has_bits_[0] |= 0x00080000u;
}
void Optimization::clear_has_weight_adapt_factor() {
  _has_bits_[0] &= ~0x00080000u;
}
void Optimization::clear_weight_adapt_factor() {
  weight_adapt_factor_ = 0;
  clear_has_weight_adapt_factor();
}
float Optimization::weight_adapt_factor() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.weight_adapt_factor)
  return weight_adapt_factor_;
}
void Optimization::set_weight_adapt_factor(float value) {
  set_has_weight_adapt_factor();
  weight_adapt_factor_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.weight_adapt_factor)
}

// optional float weight_prefer_rotdir = 21;
bool Optimization::has_weight_prefer_rotdir() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Optimization::set_has_weight_prefer_rotdir() {
  _has_bits_[0] |= 0x00100000u;
}
void Optimization::clear_has_weight_prefer_rotdir() {
  _has_bits_[0] &= ~0x00100000u;
}
void Optimization::clear_weight_prefer_rotdir() {
  weight_prefer_rotdir_ = 0;
  clear_has_weight_prefer_rotdir();
}
float Optimization::weight_prefer_rotdir() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.weight_prefer_rotdir)
  return weight_prefer_rotdir_;
}
void Optimization::set_weight_prefer_rotdir(float value) {
  set_has_weight_prefer_rotdir();
  weight_prefer_rotdir_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.weight_prefer_rotdir)
}

// optional float weight_acc_lim_theta = 22;
bool Optimization::has_weight_acc_lim_theta() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Optimization::set_has_weight_acc_lim_theta() {
  _has_bits_[0] |= 0x00200000u;
}
void Optimization::clear_has_weight_acc_lim_theta() {
  _has_bits_[0] &= ~0x00200000u;
}
void Optimization::clear_weight_acc_lim_theta() {
  weight_acc_lim_theta_ = 0;
  clear_has_weight_acc_lim_theta();
}
float Optimization::weight_acc_lim_theta() const {
  // @@protoc_insertion_point(field_get:or_local_planner.Optimization.weight_acc_lim_theta)
  return weight_acc_lim_theta_;
}
void Optimization::set_weight_acc_lim_theta(float value) {
  set_has_weight_acc_lim_theta();
  weight_acc_lim_theta_ = value;
  // @@protoc_insertion_point(field_set:or_local_planner.Optimization.weight_acc_lim_theta)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Config::kOptFrameFieldNumber;
const int Config::kTrajectoryOptFieldNumber;
const int Config::kKinematicsOptFieldNumber;
const int Config::kToleranceOptFieldNumber;
const int Config::kObstaclesOptFieldNumber;
const int Config::kOptimizeInfoFieldNumber;
const int Config::kRobotTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Config::Config()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:or_local_planner.Config)
}
Config::Config(const Config& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      robot_type_(from.robot_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_opt_frame()) {
    opt_frame_ = new ::or_local_planner::FrameID(*from.opt_frame_);
  } else {
    opt_frame_ = NULL;
  }
  if (from.has_trajectory_opt()) {
    trajectory_opt_ = new ::or_local_planner::Trajectory(*from.trajectory_opt_);
  } else {
    trajectory_opt_ = NULL;
  }
  if (from.has_kinematics_opt()) {
    kinematics_opt_ = new ::or_local_planner::Robot(*from.kinematics_opt_);
  } else {
    kinematics_opt_ = NULL;
  }
  if (from.has_tolerance_opt()) {
    tolerance_opt_ = new ::or_local_planner::GoalTolerance(*from.tolerance_opt_);
  } else {
    tolerance_opt_ = NULL;
  }
  if (from.has_obstacles_opt()) {
    obstacles_opt_ = new ::or_local_planner::Obstacles(*from.obstacles_opt_);
  } else {
    obstacles_opt_ = NULL;
  }
  if (from.has_optimize_info()) {
    optimize_info_ = new ::or_local_planner::Optimization(*from.optimize_info_);
  } else {
    optimize_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:or_local_planner.Config)
}

void Config::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&opt_frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optimize_info_) -
      reinterpret_cast<char*>(&opt_frame_)) + sizeof(optimize_info_));
}

Config::~Config() {
  // @@protoc_insertion_point(destructor:or_local_planner.Config)
  SharedDtor();
}

void Config::SharedDtor() {
  if (this != internal_default_instance()) delete opt_frame_;
  if (this != internal_default_instance()) delete trajectory_opt_;
  if (this != internal_default_instance()) delete kinematics_opt_;
  if (this != internal_default_instance()) delete tolerance_opt_;
  if (this != internal_default_instance()) delete obstacles_opt_;
  if (this != internal_default_instance()) delete optimize_info_;
}

void Config::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Config::descriptor() {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Config& Config::default_instance() {
  protobuf_timed_5felastic_5fband_2eproto::InitDefaults();
  return *internal_default_instance();
}

Config* Config::New(::google::protobuf::Arena* arena) const {
  Config* n = new Config;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Config::Clear() {
// @@protoc_insertion_point(message_clear_start:or_local_planner.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(opt_frame_ != NULL);
      opt_frame_->::or_local_planner::FrameID::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(trajectory_opt_ != NULL);
      trajectory_opt_->::or_local_planner::Trajectory::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(kinematics_opt_ != NULL);
      kinematics_opt_->::or_local_planner::Robot::Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tolerance_opt_ != NULL);
      tolerance_opt_->::or_local_planner::GoalTolerance::Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(obstacles_opt_ != NULL);
      obstacles_opt_->::or_local_planner::Obstacles::Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(optimize_info_ != NULL);
      optimize_info_->::or_local_planner::Optimization::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Config::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:or_local_planner.Config)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .or_local_planner.FrameID opt_frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opt_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .or_local_planner.Trajectory trajectory_opt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trajectory_opt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .or_local_planner.Robot kinematics_opt = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kinematics_opt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .or_local_planner.GoalTolerance tolerance_opt = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tolerance_opt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .or_local_planner.Obstacles obstacles_opt = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obstacles_opt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .or_local_planner.Optimization optimize_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optimize_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .or_local_planner.FootprintModel robot_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_robot_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:or_local_planner.Config)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:or_local_planner.Config)
  return false;
#undef DO_
}

void Config::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:or_local_planner.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .or_local_planner.FrameID opt_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->opt_frame_, output);
  }

  // optional .or_local_planner.Trajectory trajectory_opt = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->trajectory_opt_, output);
  }

  // optional .or_local_planner.Robot kinematics_opt = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->kinematics_opt_, output);
  }

  // optional .or_local_planner.GoalTolerance tolerance_opt = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->tolerance_opt_, output);
  }

  // optional .or_local_planner.Obstacles obstacles_opt = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->obstacles_opt_, output);
  }

  // optional .or_local_planner.Optimization optimize_info = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->optimize_info_, output);
  }

  // repeated .or_local_planner.FootprintModel robot_type = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robot_type_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->robot_type(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:or_local_planner.Config)
}

::google::protobuf::uint8* Config::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:or_local_planner.Config)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .or_local_planner.FrameID opt_frame = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->opt_frame_, deterministic, target);
  }

  // optional .or_local_planner.Trajectory trajectory_opt = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->trajectory_opt_, deterministic, target);
  }

  // optional .or_local_planner.Robot kinematics_opt = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->kinematics_opt_, deterministic, target);
  }

  // optional .or_local_planner.GoalTolerance tolerance_opt = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->tolerance_opt_, deterministic, target);
  }

  // optional .or_local_planner.Obstacles obstacles_opt = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->obstacles_opt_, deterministic, target);
  }

  // optional .or_local_planner.Optimization optimize_info = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->optimize_info_, deterministic, target);
  }

  // repeated .or_local_planner.FootprintModel robot_type = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robot_type_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->robot_type(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:or_local_planner.Config)
  return target;
}

size_t Config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:or_local_planner.Config)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .or_local_planner.FootprintModel robot_type = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->robot_type_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->robot_type(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 63u) {
    // optional .or_local_planner.FrameID opt_frame = 1;
    if (has_opt_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->opt_frame_);
    }

    // optional .or_local_planner.Trajectory trajectory_opt = 2;
    if (has_trajectory_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->trajectory_opt_);
    }

    // optional .or_local_planner.Robot kinematics_opt = 3;
    if (has_kinematics_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->kinematics_opt_);
    }

    // optional .or_local_planner.GoalTolerance tolerance_opt = 4;
    if (has_tolerance_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tolerance_opt_);
    }

    // optional .or_local_planner.Obstacles obstacles_opt = 5;
    if (has_obstacles_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->obstacles_opt_);
    }

    // optional .or_local_planner.Optimization optimize_info = 6;
    if (has_optimize_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->optimize_info_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Config::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:or_local_planner.Config)
  GOOGLE_DCHECK_NE(&from, this);
  const Config* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Config>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:or_local_planner.Config)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:or_local_planner.Config)
    MergeFrom(*source);
  }
}

void Config::MergeFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:or_local_planner.Config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robot_type_.MergeFrom(from.robot_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_opt_frame()->::or_local_planner::FrameID::MergeFrom(from.opt_frame());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_trajectory_opt()->::or_local_planner::Trajectory::MergeFrom(from.trajectory_opt());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_kinematics_opt()->::or_local_planner::Robot::MergeFrom(from.kinematics_opt());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_tolerance_opt()->::or_local_planner::GoalTolerance::MergeFrom(from.tolerance_opt());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_obstacles_opt()->::or_local_planner::Obstacles::MergeFrom(from.obstacles_opt());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_optimize_info()->::or_local_planner::Optimization::MergeFrom(from.optimize_info());
    }
  }
}

void Config::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:or_local_planner.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Config::CopyFrom(const Config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:or_local_planner.Config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Config::IsInitialized() const {
  return true;
}

void Config::Swap(Config* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Config::InternalSwap(Config* other) {
  using std::swap;
  robot_type_.InternalSwap(&other->robot_type_);
  swap(opt_frame_, other->opt_frame_);
  swap(trajectory_opt_, other->trajectory_opt_);
  swap(kinematics_opt_, other->kinematics_opt_);
  swap(tolerance_opt_, other->tolerance_opt_);
  swap(obstacles_opt_, other->obstacles_opt_);
  swap(optimize_info_, other->optimize_info_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Config::GetMetadata() const {
  protobuf_timed_5felastic_5fband_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_timed_5felastic_5fband_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Config

// optional .or_local_planner.FrameID opt_frame = 1;
bool Config::has_opt_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Config::set_has_opt_frame() {
  _has_bits_[0] |= 0x00000001u;
}
void Config::clear_has_opt_frame() {
  _has_bits_[0] &= ~0x00000001u;
}
void Config::clear_opt_frame() {
  if (opt_frame_ != NULL) opt_frame_->::or_local_planner::FrameID::Clear();
  clear_has_opt_frame();
}
const ::or_local_planner::FrameID& Config::opt_frame() const {
  const ::or_local_planner::FrameID* p = opt_frame_;
  // @@protoc_insertion_point(field_get:or_local_planner.Config.opt_frame)
  return p != NULL ? *p : *reinterpret_cast<const ::or_local_planner::FrameID*>(
      &::or_local_planner::_FrameID_default_instance_);
}
::or_local_planner::FrameID* Config::mutable_opt_frame() {
  set_has_opt_frame();
  if (opt_frame_ == NULL) {
    opt_frame_ = new ::or_local_planner::FrameID;
  }
  // @@protoc_insertion_point(field_mutable:or_local_planner.Config.opt_frame)
  return opt_frame_;
}
::or_local_planner::FrameID* Config::release_opt_frame() {
  // @@protoc_insertion_point(field_release:or_local_planner.Config.opt_frame)
  clear_has_opt_frame();
  ::or_local_planner::FrameID* temp = opt_frame_;
  opt_frame_ = NULL;
  return temp;
}
void Config::set_allocated_opt_frame(::or_local_planner::FrameID* opt_frame) {
  delete opt_frame_;
  opt_frame_ = opt_frame;
  if (opt_frame) {
    set_has_opt_frame();
  } else {
    clear_has_opt_frame();
  }
  // @@protoc_insertion_point(field_set_allocated:or_local_planner.Config.opt_frame)
}

// optional .or_local_planner.Trajectory trajectory_opt = 2;
bool Config::has_trajectory_opt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Config::set_has_trajectory_opt() {
  _has_bits_[0] |= 0x00000002u;
}
void Config::clear_has_trajectory_opt() {
  _has_bits_[0] &= ~0x00000002u;
}
void Config::clear_trajectory_opt() {
  if (trajectory_opt_ != NULL) trajectory_opt_->::or_local_planner::Trajectory::Clear();
  clear_has_trajectory_opt();
}
const ::or_local_planner::Trajectory& Config::trajectory_opt() const {
  const ::or_local_planner::Trajectory* p = trajectory_opt_;
  // @@protoc_insertion_point(field_get:or_local_planner.Config.trajectory_opt)
  return p != NULL ? *p : *reinterpret_cast<const ::or_local_planner::Trajectory*>(
      &::or_local_planner::_Trajectory_default_instance_);
}
::or_local_planner::Trajectory* Config::mutable_trajectory_opt() {
  set_has_trajectory_opt();
  if (trajectory_opt_ == NULL) {
    trajectory_opt_ = new ::or_local_planner::Trajectory;
  }
  // @@protoc_insertion_point(field_mutable:or_local_planner.Config.trajectory_opt)
  return trajectory_opt_;
}
::or_local_planner::Trajectory* Config::release_trajectory_opt() {
  // @@protoc_insertion_point(field_release:or_local_planner.Config.trajectory_opt)
  clear_has_trajectory_opt();
  ::or_local_planner::Trajectory* temp = trajectory_opt_;
  trajectory_opt_ = NULL;
  return temp;
}
void Config::set_allocated_trajectory_opt(::or_local_planner::Trajectory* trajectory_opt) {
  delete trajectory_opt_;
  trajectory_opt_ = trajectory_opt;
  if (trajectory_opt) {
    set_has_trajectory_opt();
  } else {
    clear_has_trajectory_opt();
  }
  // @@protoc_insertion_point(field_set_allocated:or_local_planner.Config.trajectory_opt)
}

// optional .or_local_planner.Robot kinematics_opt = 3;
bool Config::has_kinematics_opt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Config::set_has_kinematics_opt() {
  _has_bits_[0] |= 0x00000004u;
}
void Config::clear_has_kinematics_opt() {
  _has_bits_[0] &= ~0x00000004u;
}
void Config::clear_kinematics_opt() {
  if (kinematics_opt_ != NULL) kinematics_opt_->::or_local_planner::Robot::Clear();
  clear_has_kinematics_opt();
}
const ::or_local_planner::Robot& Config::kinematics_opt() const {
  const ::or_local_planner::Robot* p = kinematics_opt_;
  // @@protoc_insertion_point(field_get:or_local_planner.Config.kinematics_opt)
  return p != NULL ? *p : *reinterpret_cast<const ::or_local_planner::Robot*>(
      &::or_local_planner::_Robot_default_instance_);
}
::or_local_planner::Robot* Config::mutable_kinematics_opt() {
  set_has_kinematics_opt();
  if (kinematics_opt_ == NULL) {
    kinematics_opt_ = new ::or_local_planner::Robot;
  }
  // @@protoc_insertion_point(field_mutable:or_local_planner.Config.kinematics_opt)
  return kinematics_opt_;
}
::or_local_planner::Robot* Config::release_kinematics_opt() {
  // @@protoc_insertion_point(field_release:or_local_planner.Config.kinematics_opt)
  clear_has_kinematics_opt();
  ::or_local_planner::Robot* temp = kinematics_opt_;
  kinematics_opt_ = NULL;
  return temp;
}
void Config::set_allocated_kinematics_opt(::or_local_planner::Robot* kinematics_opt) {
  delete kinematics_opt_;
  kinematics_opt_ = kinematics_opt;
  if (kinematics_opt) {
    set_has_kinematics_opt();
  } else {
    clear_has_kinematics_opt();
  }
  // @@protoc_insertion_point(field_set_allocated:or_local_planner.Config.kinematics_opt)
}

// optional .or_local_planner.GoalTolerance tolerance_opt = 4;
bool Config::has_tolerance_opt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Config::set_has_tolerance_opt() {
  _has_bits_[0] |= 0x00000008u;
}
void Config::clear_has_tolerance_opt() {
  _has_bits_[0] &= ~0x00000008u;
}
void Config::clear_tolerance_opt() {
  if (tolerance_opt_ != NULL) tolerance_opt_->::or_local_planner::GoalTolerance::Clear();
  clear_has_tolerance_opt();
}
const ::or_local_planner::GoalTolerance& Config::tolerance_opt() const {
  const ::or_local_planner::GoalTolerance* p = tolerance_opt_;
  // @@protoc_insertion_point(field_get:or_local_planner.Config.tolerance_opt)
  return p != NULL ? *p : *reinterpret_cast<const ::or_local_planner::GoalTolerance*>(
      &::or_local_planner::_GoalTolerance_default_instance_);
}
::or_local_planner::GoalTolerance* Config::mutable_tolerance_opt() {
  set_has_tolerance_opt();
  if (tolerance_opt_ == NULL) {
    tolerance_opt_ = new ::or_local_planner::GoalTolerance;
  }
  // @@protoc_insertion_point(field_mutable:or_local_planner.Config.tolerance_opt)
  return tolerance_opt_;
}
::or_local_planner::GoalTolerance* Config::release_tolerance_opt() {
  // @@protoc_insertion_point(field_release:or_local_planner.Config.tolerance_opt)
  clear_has_tolerance_opt();
  ::or_local_planner::GoalTolerance* temp = tolerance_opt_;
  tolerance_opt_ = NULL;
  return temp;
}
void Config::set_allocated_tolerance_opt(::or_local_planner::GoalTolerance* tolerance_opt) {
  delete tolerance_opt_;
  tolerance_opt_ = tolerance_opt;
  if (tolerance_opt) {
    set_has_tolerance_opt();
  } else {
    clear_has_tolerance_opt();
  }
  // @@protoc_insertion_point(field_set_allocated:or_local_planner.Config.tolerance_opt)
}

// optional .or_local_planner.Obstacles obstacles_opt = 5;
bool Config::has_obstacles_opt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Config::set_has_obstacles_opt() {
  _has_bits_[0] |= 0x00000010u;
}
void Config::clear_has_obstacles_opt() {
  _has_bits_[0] &= ~0x00000010u;
}
void Config::clear_obstacles_opt() {
  if (obstacles_opt_ != NULL) obstacles_opt_->::or_local_planner::Obstacles::Clear();
  clear_has_obstacles_opt();
}
const ::or_local_planner::Obstacles& Config::obstacles_opt() const {
  const ::or_local_planner::Obstacles* p = obstacles_opt_;
  // @@protoc_insertion_point(field_get:or_local_planner.Config.obstacles_opt)
  return p != NULL ? *p : *reinterpret_cast<const ::or_local_planner::Obstacles*>(
      &::or_local_planner::_Obstacles_default_instance_);
}
::or_local_planner::Obstacles* Config::mutable_obstacles_opt() {
  set_has_obstacles_opt();
  if (obstacles_opt_ == NULL) {
    obstacles_opt_ = new ::or_local_planner::Obstacles;
  }
  // @@protoc_insertion_point(field_mutable:or_local_planner.Config.obstacles_opt)
  return obstacles_opt_;
}
::or_local_planner::Obstacles* Config::release_obstacles_opt() {
  // @@protoc_insertion_point(field_release:or_local_planner.Config.obstacles_opt)
  clear_has_obstacles_opt();
  ::or_local_planner::Obstacles* temp = obstacles_opt_;
  obstacles_opt_ = NULL;
  return temp;
}
void Config::set_allocated_obstacles_opt(::or_local_planner::Obstacles* obstacles_opt) {
  delete obstacles_opt_;
  obstacles_opt_ = obstacles_opt;
  if (obstacles_opt) {
    set_has_obstacles_opt();
  } else {
    clear_has_obstacles_opt();
  }
  // @@protoc_insertion_point(field_set_allocated:or_local_planner.Config.obstacles_opt)
}

// optional .or_local_planner.Optimization optimize_info = 6;
bool Config::has_optimize_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Config::set_has_optimize_info() {
  _has_bits_[0] |= 0x00000020u;
}
void Config::clear_has_optimize_info() {
  _has_bits_[0] &= ~0x00000020u;
}
void Config::clear_optimize_info() {
  if (optimize_info_ != NULL) optimize_info_->::or_local_planner::Optimization::Clear();
  clear_has_optimize_info();
}
const ::or_local_planner::Optimization& Config::optimize_info() const {
  const ::or_local_planner::Optimization* p = optimize_info_;
  // @@protoc_insertion_point(field_get:or_local_planner.Config.optimize_info)
  return p != NULL ? *p : *reinterpret_cast<const ::or_local_planner::Optimization*>(
      &::or_local_planner::_Optimization_default_instance_);
}
::or_local_planner::Optimization* Config::mutable_optimize_info() {
  set_has_optimize_info();
  if (optimize_info_ == NULL) {
    optimize_info_ = new ::or_local_planner::Optimization;
  }
  // @@protoc_insertion_point(field_mutable:or_local_planner.Config.optimize_info)
  return optimize_info_;
}
::or_local_planner::Optimization* Config::release_optimize_info() {
  // @@protoc_insertion_point(field_release:or_local_planner.Config.optimize_info)
  clear_has_optimize_info();
  ::or_local_planner::Optimization* temp = optimize_info_;
  optimize_info_ = NULL;
  return temp;
}
void Config::set_allocated_optimize_info(::or_local_planner::Optimization* optimize_info) {
  delete optimize_info_;
  optimize_info_ = optimize_info;
  if (optimize_info) {
    set_has_optimize_info();
  } else {
    clear_has_optimize_info();
  }
  // @@protoc_insertion_point(field_set_allocated:or_local_planner.Config.optimize_info)
}

// repeated .or_local_planner.FootprintModel robot_type = 7;
int Config::robot_type_size() const {
  return robot_type_.size();
}
void Config::clear_robot_type() {
  robot_type_.Clear();
}
const ::or_local_planner::FootprintModel& Config::robot_type(int index) const {
  // @@protoc_insertion_point(field_get:or_local_planner.Config.robot_type)
  return robot_type_.Get(index);
}
::or_local_planner::FootprintModel* Config::mutable_robot_type(int index) {
  // @@protoc_insertion_point(field_mutable:or_local_planner.Config.robot_type)
  return robot_type_.Mutable(index);
}
::or_local_planner::FootprintModel* Config::add_robot_type() {
  // @@protoc_insertion_point(field_add:or_local_planner.Config.robot_type)
  return robot_type_.Add();
}
::google::protobuf::RepeatedPtrField< ::or_local_planner::FootprintModel >*
Config::mutable_robot_type() {
  // @@protoc_insertion_point(field_mutable_list:or_local_planner.Config.robot_type)
  return &robot_type_;
}
const ::google::protobuf::RepeatedPtrField< ::or_local_planner::FootprintModel >&
Config::robot_type() const {
  // @@protoc_insertion_point(field_list:or_local_planner.Config.robot_type)
  return robot_type_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace or_local_planner

// @@protoc_insertion_point(global_scope)
