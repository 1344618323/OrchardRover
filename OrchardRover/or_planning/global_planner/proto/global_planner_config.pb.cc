// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: global_planner_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "global_planner_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace or_global_planner {
class GlobalPlannerConfigDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GlobalPlannerConfig>
     _instance;
} _GlobalPlannerConfig_default_instance_;

namespace protobuf_global_5fplanner_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalPlannerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalPlannerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalPlannerConfig, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalPlannerConfig, selected_algorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalPlannerConfig, frequency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalPlannerConfig, max_retries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalPlannerConfig, goal_distance_tolerance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalPlannerConfig, goal_angle_tolerance_),
  ~0u,
  0,
  1,
  2,
  3,
  4,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(GlobalPlannerConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_GlobalPlannerConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "global_planner_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _GlobalPlannerConfig_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GlobalPlannerConfig_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033global_planner_config.proto\022\021or_global"
      "_planner\"\246\001\n\023GlobalPlannerConfig\022\014\n\004name"
      "\030\001 \003(\t\022\032\n\022selected_algorithm\030\002 \001(\t\022\021\n\tfr"
      "equency\030\003 \002(\005\022\023\n\013max_retries\030\004 \002(\005\022\037\n\027go"
      "al_distance_tolerance\030\005 \002(\001\022\034\n\024goal_angl"
      "e_tolerance\030\006 \002(\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 217);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "global_planner_config.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_global_5fplanner_5fconfig_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GlobalPlannerConfig::kNameFieldNumber;
const int GlobalPlannerConfig::kSelectedAlgorithmFieldNumber;
const int GlobalPlannerConfig::kFrequencyFieldNumber;
const int GlobalPlannerConfig::kMaxRetriesFieldNumber;
const int GlobalPlannerConfig::kGoalDistanceToleranceFieldNumber;
const int GlobalPlannerConfig::kGoalAngleToleranceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GlobalPlannerConfig::GlobalPlannerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_global_5fplanner_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:or_global_planner.GlobalPlannerConfig)
}
GlobalPlannerConfig::GlobalPlannerConfig(const GlobalPlannerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      name_(from.name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  selected_algorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_selected_algorithm()) {
    selected_algorithm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selected_algorithm_);
  }
  ::memcpy(&frequency_, &from.frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&goal_angle_tolerance_) -
    reinterpret_cast<char*>(&frequency_)) + sizeof(goal_angle_tolerance_));
  // @@protoc_insertion_point(copy_constructor:or_global_planner.GlobalPlannerConfig)
}

void GlobalPlannerConfig::SharedCtor() {
  _cached_size_ = 0;
  selected_algorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&goal_angle_tolerance_) -
      reinterpret_cast<char*>(&frequency_)) + sizeof(goal_angle_tolerance_));
}

GlobalPlannerConfig::~GlobalPlannerConfig() {
  // @@protoc_insertion_point(destructor:or_global_planner.GlobalPlannerConfig)
  SharedDtor();
}

void GlobalPlannerConfig::SharedDtor() {
  selected_algorithm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GlobalPlannerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalPlannerConfig::descriptor() {
  protobuf_global_5fplanner_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_global_5fplanner_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GlobalPlannerConfig& GlobalPlannerConfig::default_instance() {
  protobuf_global_5fplanner_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

GlobalPlannerConfig* GlobalPlannerConfig::New(::google::protobuf::Arena* arena) const {
  GlobalPlannerConfig* n = new GlobalPlannerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GlobalPlannerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:or_global_planner.GlobalPlannerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.Clear();
  if (has_selected_algorithm()) {
    GOOGLE_DCHECK(!selected_algorithm_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*selected_algorithm_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&frequency_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&goal_angle_tolerance_) -
        reinterpret_cast<char*>(&frequency_)) + sizeof(goal_angle_tolerance_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GlobalPlannerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:or_global_planner.GlobalPlannerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name(this->name_size() - 1).data(),
            static_cast<int>(this->name(this->name_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "or_global_planner.GlobalPlannerConfig.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string selected_algorithm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selected_algorithm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->selected_algorithm().data(), static_cast<int>(this->selected_algorithm().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "or_global_planner.GlobalPlannerConfig.selected_algorithm");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 frequency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_frequency();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 max_retries = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_max_retries();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_retries_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double goal_distance_tolerance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_goal_distance_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &goal_distance_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double goal_angle_tolerance = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_goal_angle_tolerance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &goal_angle_tolerance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:or_global_planner.GlobalPlannerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:or_global_planner.GlobalPlannerConfig)
  return false;
#undef DO_
}

void GlobalPlannerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:or_global_planner.GlobalPlannerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string name = 1;
  for (int i = 0, n = this->name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name(i).data(), static_cast<int>(this->name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "or_global_planner.GlobalPlannerConfig.name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string selected_algorithm = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->selected_algorithm().data(), static_cast<int>(this->selected_algorithm().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "or_global_planner.GlobalPlannerConfig.selected_algorithm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->selected_algorithm(), output);
  }

  // required int32 frequency = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frequency(), output);
  }

  // required int32 max_retries = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_retries(), output);
  }

  // required double goal_distance_tolerance = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->goal_distance_tolerance(), output);
  }

  // required double goal_angle_tolerance = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->goal_angle_tolerance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:or_global_planner.GlobalPlannerConfig)
}

::google::protobuf::uint8* GlobalPlannerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:or_global_planner.GlobalPlannerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string name = 1;
  for (int i = 0, n = this->name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name(i).data(), static_cast<int>(this->name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "or_global_planner.GlobalPlannerConfig.name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->name(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string selected_algorithm = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->selected_algorithm().data(), static_cast<int>(this->selected_algorithm().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "or_global_planner.GlobalPlannerConfig.selected_algorithm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->selected_algorithm(), target);
  }

  // required int32 frequency = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->frequency(), target);
  }

  // required int32 max_retries = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_retries(), target);
  }

  // required double goal_distance_tolerance = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->goal_distance_tolerance(), target);
  }

  // required double goal_angle_tolerance = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->goal_angle_tolerance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:or_global_planner.GlobalPlannerConfig)
  return target;
}

size_t GlobalPlannerConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:or_global_planner.GlobalPlannerConfig)
  size_t total_size = 0;

  if (has_frequency()) {
    // required int32 frequency = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frequency());
  }

  if (has_max_retries()) {
    // required int32 max_retries = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_retries());
  }

  if (has_goal_distance_tolerance()) {
    // required double goal_distance_tolerance = 5;
    total_size += 1 + 8;
  }

  if (has_goal_angle_tolerance()) {
    // required double goal_angle_tolerance = 6;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t GlobalPlannerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:or_global_planner.GlobalPlannerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001e) ^ 0x0000001e) == 0) {  // All required fields are present.
    // required int32 frequency = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frequency());

    // required int32 max_retries = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_retries());

    // required double goal_distance_tolerance = 5;
    total_size += 1 + 8;

    // required double goal_angle_tolerance = 6;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated string name = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->name_size());
  for (int i = 0, n = this->name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  // optional string selected_algorithm = 2;
  if (has_selected_algorithm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->selected_algorithm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalPlannerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:or_global_planner.GlobalPlannerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const GlobalPlannerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GlobalPlannerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:or_global_planner.GlobalPlannerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:or_global_planner.GlobalPlannerConfig)
    MergeFrom(*source);
  }
}

void GlobalPlannerConfig::MergeFrom(const GlobalPlannerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:or_global_planner.GlobalPlannerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  name_.MergeFrom(from.name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_selected_algorithm();
      selected_algorithm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.selected_algorithm_);
    }
    if (cached_has_bits & 0x00000002u) {
      frequency_ = from.frequency_;
    }
    if (cached_has_bits & 0x00000004u) {
      max_retries_ = from.max_retries_;
    }
    if (cached_has_bits & 0x00000008u) {
      goal_distance_tolerance_ = from.goal_distance_tolerance_;
    }
    if (cached_has_bits & 0x00000010u) {
      goal_angle_tolerance_ = from.goal_angle_tolerance_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GlobalPlannerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:or_global_planner.GlobalPlannerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalPlannerConfig::CopyFrom(const GlobalPlannerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:or_global_planner.GlobalPlannerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalPlannerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;
  return true;
}

void GlobalPlannerConfig::Swap(GlobalPlannerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GlobalPlannerConfig::InternalSwap(GlobalPlannerConfig* other) {
  using std::swap;
  name_.InternalSwap(&other->name_);
  selected_algorithm_.Swap(&other->selected_algorithm_);
  swap(frequency_, other->frequency_);
  swap(max_retries_, other->max_retries_);
  swap(goal_distance_tolerance_, other->goal_distance_tolerance_);
  swap(goal_angle_tolerance_, other->goal_angle_tolerance_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GlobalPlannerConfig::GetMetadata() const {
  protobuf_global_5fplanner_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_global_5fplanner_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GlobalPlannerConfig

// repeated string name = 1;
int GlobalPlannerConfig::name_size() const {
  return name_.size();
}
void GlobalPlannerConfig::clear_name() {
  name_.Clear();
}
const ::std::string& GlobalPlannerConfig::name(int index) const {
  // @@protoc_insertion_point(field_get:or_global_planner.GlobalPlannerConfig.name)
  return name_.Get(index);
}
::std::string* GlobalPlannerConfig::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:or_global_planner.GlobalPlannerConfig.name)
  return name_.Mutable(index);
}
void GlobalPlannerConfig::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:or_global_planner.GlobalPlannerConfig.name)
  name_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void GlobalPlannerConfig::set_name(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:or_global_planner.GlobalPlannerConfig.name)
  name_.Mutable(index)->assign(std::move(value));
}
#endif
void GlobalPlannerConfig::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:or_global_planner.GlobalPlannerConfig.name)
}
void GlobalPlannerConfig::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:or_global_planner.GlobalPlannerConfig.name)
}
::std::string* GlobalPlannerConfig::add_name() {
  // @@protoc_insertion_point(field_add_mutable:or_global_planner.GlobalPlannerConfig.name)
  return name_.Add();
}
void GlobalPlannerConfig::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:or_global_planner.GlobalPlannerConfig.name)
}
#if LANG_CXX11
void GlobalPlannerConfig::add_name(::std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:or_global_planner.GlobalPlannerConfig.name)
}
#endif
void GlobalPlannerConfig::add_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:or_global_planner.GlobalPlannerConfig.name)
}
void GlobalPlannerConfig::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:or_global_planner.GlobalPlannerConfig.name)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
GlobalPlannerConfig::name() const {
  // @@protoc_insertion_point(field_list:or_global_planner.GlobalPlannerConfig.name)
  return name_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
GlobalPlannerConfig::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:or_global_planner.GlobalPlannerConfig.name)
  return &name_;
}

// optional string selected_algorithm = 2;
bool GlobalPlannerConfig::has_selected_algorithm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GlobalPlannerConfig::set_has_selected_algorithm() {
  _has_bits_[0] |= 0x00000001u;
}
void GlobalPlannerConfig::clear_has_selected_algorithm() {
  _has_bits_[0] &= ~0x00000001u;
}
void GlobalPlannerConfig::clear_selected_algorithm() {
  selected_algorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_selected_algorithm();
}
const ::std::string& GlobalPlannerConfig::selected_algorithm() const {
  // @@protoc_insertion_point(field_get:or_global_planner.GlobalPlannerConfig.selected_algorithm)
  return selected_algorithm_.GetNoArena();
}
void GlobalPlannerConfig::set_selected_algorithm(const ::std::string& value) {
  set_has_selected_algorithm();
  selected_algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:or_global_planner.GlobalPlannerConfig.selected_algorithm)
}
#if LANG_CXX11
void GlobalPlannerConfig::set_selected_algorithm(::std::string&& value) {
  set_has_selected_algorithm();
  selected_algorithm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:or_global_planner.GlobalPlannerConfig.selected_algorithm)
}
#endif
void GlobalPlannerConfig::set_selected_algorithm(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_selected_algorithm();
  selected_algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:or_global_planner.GlobalPlannerConfig.selected_algorithm)
}
void GlobalPlannerConfig::set_selected_algorithm(const char* value, size_t size) {
  set_has_selected_algorithm();
  selected_algorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:or_global_planner.GlobalPlannerConfig.selected_algorithm)
}
::std::string* GlobalPlannerConfig::mutable_selected_algorithm() {
  set_has_selected_algorithm();
  // @@protoc_insertion_point(field_mutable:or_global_planner.GlobalPlannerConfig.selected_algorithm)
  return selected_algorithm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GlobalPlannerConfig::release_selected_algorithm() {
  // @@protoc_insertion_point(field_release:or_global_planner.GlobalPlannerConfig.selected_algorithm)
  clear_has_selected_algorithm();
  return selected_algorithm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GlobalPlannerConfig::set_allocated_selected_algorithm(::std::string* selected_algorithm) {
  if (selected_algorithm != NULL) {
    set_has_selected_algorithm();
  } else {
    clear_has_selected_algorithm();
  }
  selected_algorithm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), selected_algorithm);
  // @@protoc_insertion_point(field_set_allocated:or_global_planner.GlobalPlannerConfig.selected_algorithm)
}

// required int32 frequency = 3;
bool GlobalPlannerConfig::has_frequency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GlobalPlannerConfig::set_has_frequency() {
  _has_bits_[0] |= 0x00000002u;
}
void GlobalPlannerConfig::clear_has_frequency() {
  _has_bits_[0] &= ~0x00000002u;
}
void GlobalPlannerConfig::clear_frequency() {
  frequency_ = 0;
  clear_has_frequency();
}
::google::protobuf::int32 GlobalPlannerConfig::frequency() const {
  // @@protoc_insertion_point(field_get:or_global_planner.GlobalPlannerConfig.frequency)
  return frequency_;
}
void GlobalPlannerConfig::set_frequency(::google::protobuf::int32 value) {
  set_has_frequency();
  frequency_ = value;
  // @@protoc_insertion_point(field_set:or_global_planner.GlobalPlannerConfig.frequency)
}

// required int32 max_retries = 4;
bool GlobalPlannerConfig::has_max_retries() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GlobalPlannerConfig::set_has_max_retries() {
  _has_bits_[0] |= 0x00000004u;
}
void GlobalPlannerConfig::clear_has_max_retries() {
  _has_bits_[0] &= ~0x00000004u;
}
void GlobalPlannerConfig::clear_max_retries() {
  max_retries_ = 0;
  clear_has_max_retries();
}
::google::protobuf::int32 GlobalPlannerConfig::max_retries() const {
  // @@protoc_insertion_point(field_get:or_global_planner.GlobalPlannerConfig.max_retries)
  return max_retries_;
}
void GlobalPlannerConfig::set_max_retries(::google::protobuf::int32 value) {
  set_has_max_retries();
  max_retries_ = value;
  // @@protoc_insertion_point(field_set:or_global_planner.GlobalPlannerConfig.max_retries)
}

// required double goal_distance_tolerance = 5;
bool GlobalPlannerConfig::has_goal_distance_tolerance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GlobalPlannerConfig::set_has_goal_distance_tolerance() {
  _has_bits_[0] |= 0x00000008u;
}
void GlobalPlannerConfig::clear_has_goal_distance_tolerance() {
  _has_bits_[0] &= ~0x00000008u;
}
void GlobalPlannerConfig::clear_goal_distance_tolerance() {
  goal_distance_tolerance_ = 0;
  clear_has_goal_distance_tolerance();
}
double GlobalPlannerConfig::goal_distance_tolerance() const {
  // @@protoc_insertion_point(field_get:or_global_planner.GlobalPlannerConfig.goal_distance_tolerance)
  return goal_distance_tolerance_;
}
void GlobalPlannerConfig::set_goal_distance_tolerance(double value) {
  set_has_goal_distance_tolerance();
  goal_distance_tolerance_ = value;
  // @@protoc_insertion_point(field_set:or_global_planner.GlobalPlannerConfig.goal_distance_tolerance)
}

// required double goal_angle_tolerance = 6;
bool GlobalPlannerConfig::has_goal_angle_tolerance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GlobalPlannerConfig::set_has_goal_angle_tolerance() {
  _has_bits_[0] |= 0x00000010u;
}
void GlobalPlannerConfig::clear_has_goal_angle_tolerance() {
  _has_bits_[0] &= ~0x00000010u;
}
void GlobalPlannerConfig::clear_goal_angle_tolerance() {
  goal_angle_tolerance_ = 0;
  clear_has_goal_angle_tolerance();
}
double GlobalPlannerConfig::goal_angle_tolerance() const {
  // @@protoc_insertion_point(field_get:or_global_planner.GlobalPlannerConfig.goal_angle_tolerance)
  return goal_angle_tolerance_;
}
void GlobalPlannerConfig::set_goal_angle_tolerance(double value) {
  set_has_goal_angle_tolerance();
  goal_angle_tolerance_ = value;
  // @@protoc_insertion_point(field_set:or_global_planner.GlobalPlannerConfig.goal_angle_tolerance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace or_global_planner

// @@protoc_insertion_point(global_scope)
