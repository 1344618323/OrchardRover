// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: costmap_parameter_setting.proto

#ifndef PROTOBUF_costmap_5fparameter_5fsetting_2eproto__INCLUDED
#define PROTOBUF_costmap_5fparameter_5fsetting_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace or_costmap {
class Footprint;
class FootprintDefaultTypeInternal;
extern FootprintDefaultTypeInternal _Footprint_default_instance_;
class ParaCollection;
class ParaCollectionDefaultTypeInternal;
extern ParaCollectionDefaultTypeInternal _ParaCollection_default_instance_;
class ParaCostmapInterface;
class ParaCostmapInterfaceDefaultTypeInternal;
extern ParaCostmapInterfaceDefaultTypeInternal _ParaCostmapInterface_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
}  // namespace or_costmap

namespace or_costmap {

namespace protobuf_costmap_5fparameter_5fsetting_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_costmap_5fparameter_5fsetting_2eproto

// ===================================================================

class ParaCostmapInterface : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:or_costmap.ParaCostmapInterface) */ {
 public:
  ParaCostmapInterface();
  virtual ~ParaCostmapInterface();

  ParaCostmapInterface(const ParaCostmapInterface& from);

  inline ParaCostmapInterface& operator=(const ParaCostmapInterface& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParaCostmapInterface(ParaCostmapInterface&& from) noexcept
    : ParaCostmapInterface() {
    *this = ::std::move(from);
  }

  inline ParaCostmapInterface& operator=(ParaCostmapInterface&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParaCostmapInterface& default_instance();

  static inline const ParaCostmapInterface* internal_default_instance() {
    return reinterpret_cast<const ParaCostmapInterface*>(
               &_ParaCostmapInterface_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ParaCostmapInterface* other);
  friend void swap(ParaCostmapInterface& a, ParaCostmapInterface& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParaCostmapInterface* New() const PROTOBUF_FINAL { return New(NULL); }

  ParaCostmapInterface* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParaCostmapInterface& from);
  void MergeFrom(const ParaCostmapInterface& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParaCostmapInterface* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string global_frame = 1;
  bool has_global_frame() const;
  void clear_global_frame();
  static const int kGlobalFrameFieldNumber = 1;
  const ::std::string& global_frame() const;
  void set_global_frame(const ::std::string& value);
  #if LANG_CXX11
  void set_global_frame(::std::string&& value);
  #endif
  void set_global_frame(const char* value);
  void set_global_frame(const char* value, size_t size);
  ::std::string* mutable_global_frame();
  ::std::string* release_global_frame();
  void set_allocated_global_frame(::std::string* global_frame);

  // required string robot_base_frame = 2;
  bool has_robot_base_frame() const;
  void clear_robot_base_frame();
  static const int kRobotBaseFrameFieldNumber = 2;
  const ::std::string& robot_base_frame() const;
  void set_robot_base_frame(const ::std::string& value);
  #if LANG_CXX11
  void set_robot_base_frame(::std::string&& value);
  #endif
  void set_robot_base_frame(const char* value);
  void set_robot_base_frame(const char* value, size_t size);
  ::std::string* mutable_robot_base_frame();
  ::std::string* release_robot_base_frame();
  void set_allocated_robot_base_frame(::std::string* robot_base_frame);

  // optional string static_file_path = 14;
  bool has_static_file_path() const;
  void clear_static_file_path();
  static const int kStaticFilePathFieldNumber = 14;
  const ::std::string& static_file_path() const;
  void set_static_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_static_file_path(::std::string&& value);
  #endif
  void set_static_file_path(const char* value);
  void set_static_file_path(const char* value, size_t size);
  ::std::string* mutable_static_file_path();
  ::std::string* release_static_file_path();
  void set_allocated_static_file_path(::std::string* static_file_path);

  // optional string obstacle_file_path = 15;
  bool has_obstacle_file_path() const;
  void clear_obstacle_file_path();
  static const int kObstacleFilePathFieldNumber = 15;
  const ::std::string& obstacle_file_path() const;
  void set_obstacle_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_obstacle_file_path(::std::string&& value);
  #endif
  void set_obstacle_file_path(const char* value);
  void set_obstacle_file_path(const char* value, size_t size);
  ::std::string* mutable_obstacle_file_path();
  ::std::string* release_obstacle_file_path();
  void set_allocated_obstacle_file_path(::std::string* obstacle_file_path);

  // required string inflation_file_path = 16;
  bool has_inflation_file_path() const;
  void clear_inflation_file_path();
  static const int kInflationFilePathFieldNumber = 16;
  const ::std::string& inflation_file_path() const;
  void set_inflation_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_inflation_file_path(::std::string&& value);
  #endif
  void set_inflation_file_path(const char* value);
  void set_inflation_file_path(const char* value, size_t size);
  ::std::string* mutable_inflation_file_path();
  ::std::string* release_inflation_file_path();
  void set_allocated_inflation_file_path(::std::string* inflation_file_path);

  // required double footprint_padding = 3;
  bool has_footprint_padding() const;
  void clear_footprint_padding();
  static const int kFootprintPaddingFieldNumber = 3;
  double footprint_padding() const;
  void set_footprint_padding(double value);

  // required double transform_tolerance = 4;
  bool has_transform_tolerance() const;
  void clear_transform_tolerance();
  static const int kTransformToleranceFieldNumber = 4;
  double transform_tolerance() const;
  void set_transform_tolerance(double value);

  // required double map_width = 5;
  bool has_map_width() const;
  void clear_map_width();
  static const int kMapWidthFieldNumber = 5;
  double map_width() const;
  void set_map_width(double value);

  // required double map_height = 6;
  bool has_map_height() const;
  void clear_map_height();
  static const int kMapHeightFieldNumber = 6;
  double map_height() const;
  void set_map_height(double value);

  // required double map_origin_x = 7;
  bool has_map_origin_x() const;
  void clear_map_origin_x();
  static const int kMapOriginXFieldNumber = 7;
  double map_origin_x() const;
  void set_map_origin_x(double value);

  // required double map_origin_y = 8;
  bool has_map_origin_y() const;
  void clear_map_origin_y();
  static const int kMapOriginYFieldNumber = 8;
  double map_origin_y() const;
  void set_map_origin_y(double value);

  // required double map_resolution = 9;
  bool has_map_resolution() const;
  void clear_map_resolution();
  static const int kMapResolutionFieldNumber = 9;
  double map_resolution() const;
  void set_map_resolution(double value);

  // required bool is_tracking_unknown = 10;
  bool has_is_tracking_unknown() const;
  void clear_is_tracking_unknown();
  static const int kIsTrackingUnknownFieldNumber = 10;
  bool is_tracking_unknown() const;
  void set_is_tracking_unknown(bool value);

  // required bool is_rolling_window = 11;
  bool has_is_rolling_window() const;
  void clear_is_rolling_window();
  static const int kIsRollingWindowFieldNumber = 11;
  bool is_rolling_window() const;
  void set_is_rolling_window(bool value);

  // required bool has_obstacle_layer = 12;
  bool has_has_obstacle_layer() const;
  void clear_has_obstacle_layer();
  static const int kHasObstacleLayerFieldNumber = 12;
  bool has_obstacle_layer() const;
  void set_has_obstacle_layer(bool value);

  // required bool has_static_layer = 13;
  bool has_has_static_layer() const;
  void clear_has_static_layer();
  static const int kHasStaticLayerFieldNumber = 13;
  bool has_static_layer() const;
  void set_has_static_layer(bool value);

  // optional bool get_footprint = 18;
  bool has_get_footprint() const;
  void clear_get_footprint();
  static const int kGetFootprintFieldNumber = 18;
  bool get_footprint() const;
  void set_get_footprint(bool value);

  // required double map_update_frequency = 17;
  bool has_map_update_frequency() const;
  void clear_map_update_frequency();
  static const int kMapUpdateFrequencyFieldNumber = 17;
  double map_update_frequency() const;
  void set_map_update_frequency(double value);

  // @@protoc_insertion_point(class_scope:or_costmap.ParaCostmapInterface)
 private:
  void set_has_global_frame();
  void clear_has_global_frame();
  void set_has_robot_base_frame();
  void clear_has_robot_base_frame();
  void set_has_footprint_padding();
  void clear_has_footprint_padding();
  void set_has_transform_tolerance();
  void clear_has_transform_tolerance();
  void set_has_map_width();
  void clear_has_map_width();
  void set_has_map_height();
  void clear_has_map_height();
  void set_has_map_origin_x();
  void clear_has_map_origin_x();
  void set_has_map_origin_y();
  void clear_has_map_origin_y();
  void set_has_map_resolution();
  void clear_has_map_resolution();
  void set_has_is_tracking_unknown();
  void clear_has_is_tracking_unknown();
  void set_has_is_rolling_window();
  void clear_has_is_rolling_window();
  void set_has_has_obstacle_layer();
  void clear_has_has_obstacle_layer();
  void set_has_has_static_layer();
  void clear_has_has_static_layer();
  void set_has_static_file_path();
  void clear_has_static_file_path();
  void set_has_obstacle_file_path();
  void clear_has_obstacle_file_path();
  void set_has_inflation_file_path();
  void clear_has_inflation_file_path();
  void set_has_map_update_frequency();
  void clear_has_map_update_frequency();
  void set_has_get_footprint();
  void clear_has_get_footprint();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr global_frame_;
  ::google::protobuf::internal::ArenaStringPtr robot_base_frame_;
  ::google::protobuf::internal::ArenaStringPtr static_file_path_;
  ::google::protobuf::internal::ArenaStringPtr obstacle_file_path_;
  ::google::protobuf::internal::ArenaStringPtr inflation_file_path_;
  double footprint_padding_;
  double transform_tolerance_;
  double map_width_;
  double map_height_;
  double map_origin_x_;
  double map_origin_y_;
  double map_resolution_;
  bool is_tracking_unknown_;
  bool is_rolling_window_;
  bool has_obstacle_layer_;
  bool has_static_layer_;
  bool get_footprint_;
  double map_update_frequency_;
  friend struct protobuf_costmap_5fparameter_5fsetting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:or_costmap.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const PROTOBUF_FINAL { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // required double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // @@protoc_insertion_point(class_scope:or_costmap.Point)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double x_;
  double y_;
  friend struct protobuf_costmap_5fparameter_5fsetting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Footprint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:or_costmap.Footprint) */ {
 public:
  Footprint();
  virtual ~Footprint();

  Footprint(const Footprint& from);

  inline Footprint& operator=(const Footprint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Footprint(Footprint&& from) noexcept
    : Footprint() {
    *this = ::std::move(from);
  }

  inline Footprint& operator=(Footprint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Footprint& default_instance();

  static inline const Footprint* internal_default_instance() {
    return reinterpret_cast<const Footprint*>(
               &_Footprint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Footprint* other);
  friend void swap(Footprint& a, Footprint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Footprint* New() const PROTOBUF_FINAL { return New(NULL); }

  Footprint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Footprint& from);
  void MergeFrom(const Footprint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Footprint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .or_costmap.Point point = 1;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  const ::or_costmap::Point& point(int index) const;
  ::or_costmap::Point* mutable_point(int index);
  ::or_costmap::Point* add_point();
  ::google::protobuf::RepeatedPtrField< ::or_costmap::Point >*
      mutable_point();
  const ::google::protobuf::RepeatedPtrField< ::or_costmap::Point >&
      point() const;

  // @@protoc_insertion_point(class_scope:or_costmap.Footprint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::or_costmap::Point > point_;
  friend struct protobuf_costmap_5fparameter_5fsetting_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ParaCollection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:or_costmap.ParaCollection) */ {
 public:
  ParaCollection();
  virtual ~ParaCollection();

  ParaCollection(const ParaCollection& from);

  inline ParaCollection& operator=(const ParaCollection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ParaCollection(ParaCollection&& from) noexcept
    : ParaCollection() {
    *this = ::std::move(from);
  }

  inline ParaCollection& operator=(ParaCollection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ParaCollection& default_instance();

  static inline const ParaCollection* internal_default_instance() {
    return reinterpret_cast<const ParaCollection*>(
               &_ParaCollection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ParaCollection* other);
  friend void swap(ParaCollection& a, ParaCollection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ParaCollection* New() const PROTOBUF_FINAL { return New(NULL); }

  ParaCollection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ParaCollection& from);
  void MergeFrom(const ParaCollection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ParaCollection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .or_costmap.ParaCostmapInterface para_costmap_interface = 1;
  bool has_para_costmap_interface() const;
  void clear_para_costmap_interface();
  static const int kParaCostmapInterfaceFieldNumber = 1;
  const ::or_costmap::ParaCostmapInterface& para_costmap_interface() const;
  ::or_costmap::ParaCostmapInterface* mutable_para_costmap_interface();
  ::or_costmap::ParaCostmapInterface* release_para_costmap_interface();
  void set_allocated_para_costmap_interface(::or_costmap::ParaCostmapInterface* para_costmap_interface);

  // required .or_costmap.Footprint footprint = 2;
  bool has_footprint() const;
  void clear_footprint();
  static const int kFootprintFieldNumber = 2;
  const ::or_costmap::Footprint& footprint() const;
  ::or_costmap::Footprint* mutable_footprint();
  ::or_costmap::Footprint* release_footprint();
  void set_allocated_footprint(::or_costmap::Footprint* footprint);

  // @@protoc_insertion_point(class_scope:or_costmap.ParaCollection)
 private:
  void set_has_para_costmap_interface();
  void clear_has_para_costmap_interface();
  void set_has_footprint();
  void clear_has_footprint();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::or_costmap::ParaCostmapInterface* para_costmap_interface_;
  ::or_costmap::Footprint* footprint_;
  friend struct protobuf_costmap_5fparameter_5fsetting_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ParaCostmapInterface

// required string global_frame = 1;
inline bool ParaCostmapInterface::has_global_frame() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParaCostmapInterface::set_has_global_frame() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParaCostmapInterface::clear_has_global_frame() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParaCostmapInterface::clear_global_frame() {
  global_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_global_frame();
}
inline const ::std::string& ParaCostmapInterface::global_frame() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.global_frame)
  return global_frame_.GetNoArena();
}
inline void ParaCostmapInterface::set_global_frame(const ::std::string& value) {
  set_has_global_frame();
  global_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.global_frame)
}
#if LANG_CXX11
inline void ParaCostmapInterface::set_global_frame(::std::string&& value) {
  set_has_global_frame();
  global_frame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:or_costmap.ParaCostmapInterface.global_frame)
}
#endif
inline void ParaCostmapInterface::set_global_frame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_global_frame();
  global_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:or_costmap.ParaCostmapInterface.global_frame)
}
inline void ParaCostmapInterface::set_global_frame(const char* value, size_t size) {
  set_has_global_frame();
  global_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:or_costmap.ParaCostmapInterface.global_frame)
}
inline ::std::string* ParaCostmapInterface::mutable_global_frame() {
  set_has_global_frame();
  // @@protoc_insertion_point(field_mutable:or_costmap.ParaCostmapInterface.global_frame)
  return global_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParaCostmapInterface::release_global_frame() {
  // @@protoc_insertion_point(field_release:or_costmap.ParaCostmapInterface.global_frame)
  clear_has_global_frame();
  return global_frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParaCostmapInterface::set_allocated_global_frame(::std::string* global_frame) {
  if (global_frame != NULL) {
    set_has_global_frame();
  } else {
    clear_has_global_frame();
  }
  global_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), global_frame);
  // @@protoc_insertion_point(field_set_allocated:or_costmap.ParaCostmapInterface.global_frame)
}

// required string robot_base_frame = 2;
inline bool ParaCostmapInterface::has_robot_base_frame() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParaCostmapInterface::set_has_robot_base_frame() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParaCostmapInterface::clear_has_robot_base_frame() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParaCostmapInterface::clear_robot_base_frame() {
  robot_base_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_robot_base_frame();
}
inline const ::std::string& ParaCostmapInterface::robot_base_frame() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.robot_base_frame)
  return robot_base_frame_.GetNoArena();
}
inline void ParaCostmapInterface::set_robot_base_frame(const ::std::string& value) {
  set_has_robot_base_frame();
  robot_base_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.robot_base_frame)
}
#if LANG_CXX11
inline void ParaCostmapInterface::set_robot_base_frame(::std::string&& value) {
  set_has_robot_base_frame();
  robot_base_frame_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:or_costmap.ParaCostmapInterface.robot_base_frame)
}
#endif
inline void ParaCostmapInterface::set_robot_base_frame(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_robot_base_frame();
  robot_base_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:or_costmap.ParaCostmapInterface.robot_base_frame)
}
inline void ParaCostmapInterface::set_robot_base_frame(const char* value, size_t size) {
  set_has_robot_base_frame();
  robot_base_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:or_costmap.ParaCostmapInterface.robot_base_frame)
}
inline ::std::string* ParaCostmapInterface::mutable_robot_base_frame() {
  set_has_robot_base_frame();
  // @@protoc_insertion_point(field_mutable:or_costmap.ParaCostmapInterface.robot_base_frame)
  return robot_base_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParaCostmapInterface::release_robot_base_frame() {
  // @@protoc_insertion_point(field_release:or_costmap.ParaCostmapInterface.robot_base_frame)
  clear_has_robot_base_frame();
  return robot_base_frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParaCostmapInterface::set_allocated_robot_base_frame(::std::string* robot_base_frame) {
  if (robot_base_frame != NULL) {
    set_has_robot_base_frame();
  } else {
    clear_has_robot_base_frame();
  }
  robot_base_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), robot_base_frame);
  // @@protoc_insertion_point(field_set_allocated:or_costmap.ParaCostmapInterface.robot_base_frame)
}

// required double footprint_padding = 3;
inline bool ParaCostmapInterface::has_footprint_padding() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ParaCostmapInterface::set_has_footprint_padding() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ParaCostmapInterface::clear_has_footprint_padding() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ParaCostmapInterface::clear_footprint_padding() {
  footprint_padding_ = 0;
  clear_has_footprint_padding();
}
inline double ParaCostmapInterface::footprint_padding() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.footprint_padding)
  return footprint_padding_;
}
inline void ParaCostmapInterface::set_footprint_padding(double value) {
  set_has_footprint_padding();
  footprint_padding_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.footprint_padding)
}

// required double transform_tolerance = 4;
inline bool ParaCostmapInterface::has_transform_tolerance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ParaCostmapInterface::set_has_transform_tolerance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ParaCostmapInterface::clear_has_transform_tolerance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ParaCostmapInterface::clear_transform_tolerance() {
  transform_tolerance_ = 0;
  clear_has_transform_tolerance();
}
inline double ParaCostmapInterface::transform_tolerance() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.transform_tolerance)
  return transform_tolerance_;
}
inline void ParaCostmapInterface::set_transform_tolerance(double value) {
  set_has_transform_tolerance();
  transform_tolerance_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.transform_tolerance)
}

// required double map_width = 5;
inline bool ParaCostmapInterface::has_map_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ParaCostmapInterface::set_has_map_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ParaCostmapInterface::clear_has_map_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ParaCostmapInterface::clear_map_width() {
  map_width_ = 0;
  clear_has_map_width();
}
inline double ParaCostmapInterface::map_width() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.map_width)
  return map_width_;
}
inline void ParaCostmapInterface::set_map_width(double value) {
  set_has_map_width();
  map_width_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.map_width)
}

// required double map_height = 6;
inline bool ParaCostmapInterface::has_map_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ParaCostmapInterface::set_has_map_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ParaCostmapInterface::clear_has_map_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ParaCostmapInterface::clear_map_height() {
  map_height_ = 0;
  clear_has_map_height();
}
inline double ParaCostmapInterface::map_height() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.map_height)
  return map_height_;
}
inline void ParaCostmapInterface::set_map_height(double value) {
  set_has_map_height();
  map_height_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.map_height)
}

// required double map_origin_x = 7;
inline bool ParaCostmapInterface::has_map_origin_x() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ParaCostmapInterface::set_has_map_origin_x() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ParaCostmapInterface::clear_has_map_origin_x() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ParaCostmapInterface::clear_map_origin_x() {
  map_origin_x_ = 0;
  clear_has_map_origin_x();
}
inline double ParaCostmapInterface::map_origin_x() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.map_origin_x)
  return map_origin_x_;
}
inline void ParaCostmapInterface::set_map_origin_x(double value) {
  set_has_map_origin_x();
  map_origin_x_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.map_origin_x)
}

// required double map_origin_y = 8;
inline bool ParaCostmapInterface::has_map_origin_y() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ParaCostmapInterface::set_has_map_origin_y() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ParaCostmapInterface::clear_has_map_origin_y() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ParaCostmapInterface::clear_map_origin_y() {
  map_origin_y_ = 0;
  clear_has_map_origin_y();
}
inline double ParaCostmapInterface::map_origin_y() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.map_origin_y)
  return map_origin_y_;
}
inline void ParaCostmapInterface::set_map_origin_y(double value) {
  set_has_map_origin_y();
  map_origin_y_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.map_origin_y)
}

// required double map_resolution = 9;
inline bool ParaCostmapInterface::has_map_resolution() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ParaCostmapInterface::set_has_map_resolution() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ParaCostmapInterface::clear_has_map_resolution() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ParaCostmapInterface::clear_map_resolution() {
  map_resolution_ = 0;
  clear_has_map_resolution();
}
inline double ParaCostmapInterface::map_resolution() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.map_resolution)
  return map_resolution_;
}
inline void ParaCostmapInterface::set_map_resolution(double value) {
  set_has_map_resolution();
  map_resolution_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.map_resolution)
}

// required bool is_tracking_unknown = 10;
inline bool ParaCostmapInterface::has_is_tracking_unknown() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ParaCostmapInterface::set_has_is_tracking_unknown() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ParaCostmapInterface::clear_has_is_tracking_unknown() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ParaCostmapInterface::clear_is_tracking_unknown() {
  is_tracking_unknown_ = false;
  clear_has_is_tracking_unknown();
}
inline bool ParaCostmapInterface::is_tracking_unknown() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.is_tracking_unknown)
  return is_tracking_unknown_;
}
inline void ParaCostmapInterface::set_is_tracking_unknown(bool value) {
  set_has_is_tracking_unknown();
  is_tracking_unknown_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.is_tracking_unknown)
}

// required bool is_rolling_window = 11;
inline bool ParaCostmapInterface::has_is_rolling_window() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ParaCostmapInterface::set_has_is_rolling_window() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ParaCostmapInterface::clear_has_is_rolling_window() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ParaCostmapInterface::clear_is_rolling_window() {
  is_rolling_window_ = false;
  clear_has_is_rolling_window();
}
inline bool ParaCostmapInterface::is_rolling_window() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.is_rolling_window)
  return is_rolling_window_;
}
inline void ParaCostmapInterface::set_is_rolling_window(bool value) {
  set_has_is_rolling_window();
  is_rolling_window_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.is_rolling_window)
}

// required bool has_obstacle_layer = 12;
inline bool ParaCostmapInterface::has_has_obstacle_layer() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ParaCostmapInterface::set_has_has_obstacle_layer() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ParaCostmapInterface::clear_has_has_obstacle_layer() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ParaCostmapInterface::clear_has_obstacle_layer() {
  has_obstacle_layer_ = false;
  clear_has_has_obstacle_layer();
}
inline bool ParaCostmapInterface::has_obstacle_layer() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.has_obstacle_layer)
  return has_obstacle_layer_;
}
inline void ParaCostmapInterface::set_has_obstacle_layer(bool value) {
  set_has_has_obstacle_layer();
  has_obstacle_layer_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.has_obstacle_layer)
}

// required bool has_static_layer = 13;
inline bool ParaCostmapInterface::has_has_static_layer() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ParaCostmapInterface::set_has_has_static_layer() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ParaCostmapInterface::clear_has_has_static_layer() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ParaCostmapInterface::clear_has_static_layer() {
  has_static_layer_ = false;
  clear_has_has_static_layer();
}
inline bool ParaCostmapInterface::has_static_layer() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.has_static_layer)
  return has_static_layer_;
}
inline void ParaCostmapInterface::set_has_static_layer(bool value) {
  set_has_has_static_layer();
  has_static_layer_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.has_static_layer)
}

// optional string static_file_path = 14;
inline bool ParaCostmapInterface::has_static_file_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ParaCostmapInterface::set_has_static_file_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ParaCostmapInterface::clear_has_static_file_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ParaCostmapInterface::clear_static_file_path() {
  static_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_static_file_path();
}
inline const ::std::string& ParaCostmapInterface::static_file_path() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.static_file_path)
  return static_file_path_.GetNoArena();
}
inline void ParaCostmapInterface::set_static_file_path(const ::std::string& value) {
  set_has_static_file_path();
  static_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.static_file_path)
}
#if LANG_CXX11
inline void ParaCostmapInterface::set_static_file_path(::std::string&& value) {
  set_has_static_file_path();
  static_file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:or_costmap.ParaCostmapInterface.static_file_path)
}
#endif
inline void ParaCostmapInterface::set_static_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_static_file_path();
  static_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:or_costmap.ParaCostmapInterface.static_file_path)
}
inline void ParaCostmapInterface::set_static_file_path(const char* value, size_t size) {
  set_has_static_file_path();
  static_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:or_costmap.ParaCostmapInterface.static_file_path)
}
inline ::std::string* ParaCostmapInterface::mutable_static_file_path() {
  set_has_static_file_path();
  // @@protoc_insertion_point(field_mutable:or_costmap.ParaCostmapInterface.static_file_path)
  return static_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParaCostmapInterface::release_static_file_path() {
  // @@protoc_insertion_point(field_release:or_costmap.ParaCostmapInterface.static_file_path)
  clear_has_static_file_path();
  return static_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParaCostmapInterface::set_allocated_static_file_path(::std::string* static_file_path) {
  if (static_file_path != NULL) {
    set_has_static_file_path();
  } else {
    clear_has_static_file_path();
  }
  static_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), static_file_path);
  // @@protoc_insertion_point(field_set_allocated:or_costmap.ParaCostmapInterface.static_file_path)
}

// optional string obstacle_file_path = 15;
inline bool ParaCostmapInterface::has_obstacle_file_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ParaCostmapInterface::set_has_obstacle_file_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ParaCostmapInterface::clear_has_obstacle_file_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ParaCostmapInterface::clear_obstacle_file_path() {
  obstacle_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_obstacle_file_path();
}
inline const ::std::string& ParaCostmapInterface::obstacle_file_path() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.obstacle_file_path)
  return obstacle_file_path_.GetNoArena();
}
inline void ParaCostmapInterface::set_obstacle_file_path(const ::std::string& value) {
  set_has_obstacle_file_path();
  obstacle_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.obstacle_file_path)
}
#if LANG_CXX11
inline void ParaCostmapInterface::set_obstacle_file_path(::std::string&& value) {
  set_has_obstacle_file_path();
  obstacle_file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:or_costmap.ParaCostmapInterface.obstacle_file_path)
}
#endif
inline void ParaCostmapInterface::set_obstacle_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_obstacle_file_path();
  obstacle_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:or_costmap.ParaCostmapInterface.obstacle_file_path)
}
inline void ParaCostmapInterface::set_obstacle_file_path(const char* value, size_t size) {
  set_has_obstacle_file_path();
  obstacle_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:or_costmap.ParaCostmapInterface.obstacle_file_path)
}
inline ::std::string* ParaCostmapInterface::mutable_obstacle_file_path() {
  set_has_obstacle_file_path();
  // @@protoc_insertion_point(field_mutable:or_costmap.ParaCostmapInterface.obstacle_file_path)
  return obstacle_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParaCostmapInterface::release_obstacle_file_path() {
  // @@protoc_insertion_point(field_release:or_costmap.ParaCostmapInterface.obstacle_file_path)
  clear_has_obstacle_file_path();
  return obstacle_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParaCostmapInterface::set_allocated_obstacle_file_path(::std::string* obstacle_file_path) {
  if (obstacle_file_path != NULL) {
    set_has_obstacle_file_path();
  } else {
    clear_has_obstacle_file_path();
  }
  obstacle_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), obstacle_file_path);
  // @@protoc_insertion_point(field_set_allocated:or_costmap.ParaCostmapInterface.obstacle_file_path)
}

// required string inflation_file_path = 16;
inline bool ParaCostmapInterface::has_inflation_file_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ParaCostmapInterface::set_has_inflation_file_path() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ParaCostmapInterface::clear_has_inflation_file_path() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ParaCostmapInterface::clear_inflation_file_path() {
  inflation_file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_inflation_file_path();
}
inline const ::std::string& ParaCostmapInterface::inflation_file_path() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.inflation_file_path)
  return inflation_file_path_.GetNoArena();
}
inline void ParaCostmapInterface::set_inflation_file_path(const ::std::string& value) {
  set_has_inflation_file_path();
  inflation_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.inflation_file_path)
}
#if LANG_CXX11
inline void ParaCostmapInterface::set_inflation_file_path(::std::string&& value) {
  set_has_inflation_file_path();
  inflation_file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:or_costmap.ParaCostmapInterface.inflation_file_path)
}
#endif
inline void ParaCostmapInterface::set_inflation_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_inflation_file_path();
  inflation_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:or_costmap.ParaCostmapInterface.inflation_file_path)
}
inline void ParaCostmapInterface::set_inflation_file_path(const char* value, size_t size) {
  set_has_inflation_file_path();
  inflation_file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:or_costmap.ParaCostmapInterface.inflation_file_path)
}
inline ::std::string* ParaCostmapInterface::mutable_inflation_file_path() {
  set_has_inflation_file_path();
  // @@protoc_insertion_point(field_mutable:or_costmap.ParaCostmapInterface.inflation_file_path)
  return inflation_file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ParaCostmapInterface::release_inflation_file_path() {
  // @@protoc_insertion_point(field_release:or_costmap.ParaCostmapInterface.inflation_file_path)
  clear_has_inflation_file_path();
  return inflation_file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ParaCostmapInterface::set_allocated_inflation_file_path(::std::string* inflation_file_path) {
  if (inflation_file_path != NULL) {
    set_has_inflation_file_path();
  } else {
    clear_has_inflation_file_path();
  }
  inflation_file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), inflation_file_path);
  // @@protoc_insertion_point(field_set_allocated:or_costmap.ParaCostmapInterface.inflation_file_path)
}

// required double map_update_frequency = 17;
inline bool ParaCostmapInterface::has_map_update_frequency() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ParaCostmapInterface::set_has_map_update_frequency() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ParaCostmapInterface::clear_has_map_update_frequency() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ParaCostmapInterface::clear_map_update_frequency() {
  map_update_frequency_ = 0;
  clear_has_map_update_frequency();
}
inline double ParaCostmapInterface::map_update_frequency() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.map_update_frequency)
  return map_update_frequency_;
}
inline void ParaCostmapInterface::set_map_update_frequency(double value) {
  set_has_map_update_frequency();
  map_update_frequency_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.map_update_frequency)
}

// optional bool get_footprint = 18;
inline bool ParaCostmapInterface::has_get_footprint() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ParaCostmapInterface::set_has_get_footprint() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ParaCostmapInterface::clear_has_get_footprint() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ParaCostmapInterface::clear_get_footprint() {
  get_footprint_ = false;
  clear_has_get_footprint();
}
inline bool ParaCostmapInterface::get_footprint() const {
  // @@protoc_insertion_point(field_get:or_costmap.ParaCostmapInterface.get_footprint)
  return get_footprint_;
}
inline void ParaCostmapInterface::set_get_footprint(bool value) {
  set_has_get_footprint();
  get_footprint_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.ParaCostmapInterface.get_footprint)
}

// -------------------------------------------------------------------

// Point

// required double x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:or_costmap.Point.x)
  return x_;
}
inline void Point::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.Point.x)
}

// required double y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:or_costmap.Point.y)
  return y_;
}
inline void Point::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:or_costmap.Point.y)
}

// -------------------------------------------------------------------

// Footprint

// repeated .or_costmap.Point point = 1;
inline int Footprint::point_size() const {
  return point_.size();
}
inline void Footprint::clear_point() {
  point_.Clear();
}
inline const ::or_costmap::Point& Footprint::point(int index) const {
  // @@protoc_insertion_point(field_get:or_costmap.Footprint.point)
  return point_.Get(index);
}
inline ::or_costmap::Point* Footprint::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:or_costmap.Footprint.point)
  return point_.Mutable(index);
}
inline ::or_costmap::Point* Footprint::add_point() {
  // @@protoc_insertion_point(field_add:or_costmap.Footprint.point)
  return point_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::or_costmap::Point >*
Footprint::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:or_costmap.Footprint.point)
  return &point_;
}
inline const ::google::protobuf::RepeatedPtrField< ::or_costmap::Point >&
Footprint::point() const {
  // @@protoc_insertion_point(field_list:or_costmap.Footprint.point)
  return point_;
}

// -------------------------------------------------------------------

// ParaCollection

// required .or_costmap.ParaCostmapInterface para_costmap_interface = 1;
inline bool ParaCollection::has_para_costmap_interface() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParaCollection::set_has_para_costmap_interface() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParaCollection::clear_has_para_costmap_interface() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParaCollection::clear_para_costmap_interface() {
  if (para_costmap_interface_ != NULL) para_costmap_interface_->::or_costmap::ParaCostmapInterface::Clear();
  clear_has_para_costmap_interface();
}
inline const ::or_costmap::ParaCostmapInterface& ParaCollection::para_costmap_interface() const {
  const ::or_costmap::ParaCostmapInterface* p = para_costmap_interface_;
  // @@protoc_insertion_point(field_get:or_costmap.ParaCollection.para_costmap_interface)
  return p != NULL ? *p : *reinterpret_cast<const ::or_costmap::ParaCostmapInterface*>(
      &::or_costmap::_ParaCostmapInterface_default_instance_);
}
inline ::or_costmap::ParaCostmapInterface* ParaCollection::mutable_para_costmap_interface() {
  set_has_para_costmap_interface();
  if (para_costmap_interface_ == NULL) {
    para_costmap_interface_ = new ::or_costmap::ParaCostmapInterface;
  }
  // @@protoc_insertion_point(field_mutable:or_costmap.ParaCollection.para_costmap_interface)
  return para_costmap_interface_;
}
inline ::or_costmap::ParaCostmapInterface* ParaCollection::release_para_costmap_interface() {
  // @@protoc_insertion_point(field_release:or_costmap.ParaCollection.para_costmap_interface)
  clear_has_para_costmap_interface();
  ::or_costmap::ParaCostmapInterface* temp = para_costmap_interface_;
  para_costmap_interface_ = NULL;
  return temp;
}
inline void ParaCollection::set_allocated_para_costmap_interface(::or_costmap::ParaCostmapInterface* para_costmap_interface) {
  delete para_costmap_interface_;
  para_costmap_interface_ = para_costmap_interface;
  if (para_costmap_interface) {
    set_has_para_costmap_interface();
  } else {
    clear_has_para_costmap_interface();
  }
  // @@protoc_insertion_point(field_set_allocated:or_costmap.ParaCollection.para_costmap_interface)
}

// required .or_costmap.Footprint footprint = 2;
inline bool ParaCollection::has_footprint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParaCollection::set_has_footprint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParaCollection::clear_has_footprint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParaCollection::clear_footprint() {
  if (footprint_ != NULL) footprint_->::or_costmap::Footprint::Clear();
  clear_has_footprint();
}
inline const ::or_costmap::Footprint& ParaCollection::footprint() const {
  const ::or_costmap::Footprint* p = footprint_;
  // @@protoc_insertion_point(field_get:or_costmap.ParaCollection.footprint)
  return p != NULL ? *p : *reinterpret_cast<const ::or_costmap::Footprint*>(
      &::or_costmap::_Footprint_default_instance_);
}
inline ::or_costmap::Footprint* ParaCollection::mutable_footprint() {
  set_has_footprint();
  if (footprint_ == NULL) {
    footprint_ = new ::or_costmap::Footprint;
  }
  // @@protoc_insertion_point(field_mutable:or_costmap.ParaCollection.footprint)
  return footprint_;
}
inline ::or_costmap::Footprint* ParaCollection::release_footprint() {
  // @@protoc_insertion_point(field_release:or_costmap.ParaCollection.footprint)
  clear_has_footprint();
  ::or_costmap::Footprint* temp = footprint_;
  footprint_ = NULL;
  return temp;
}
inline void ParaCollection::set_allocated_footprint(::or_costmap::Footprint* footprint) {
  delete footprint_;
  footprint_ = footprint;
  if (footprint) {
    set_has_footprint();
  } else {
    clear_has_footprint();
  }
  // @@protoc_insertion_point(field_set_allocated:or_costmap.ParaCollection.footprint)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace or_costmap

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_costmap_5fparameter_5fsetting_2eproto__INCLUDED
